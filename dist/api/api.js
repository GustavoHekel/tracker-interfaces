"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Tracker API
 * Tracker API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RolesApiAxiosParamCreator = exports.ReportsApi = exports.ReportsApiFactory = exports.ReportsApiFp = exports.ReportsApiAxiosParamCreator = exports.PaymentsApi = exports.PaymentsApiFactory = exports.PaymentsApiFp = exports.PaymentsApiAxiosParamCreator = exports.LocationsApi = exports.LocationsApiFactory = exports.LocationsApiFp = exports.LocationsApiAxiosParamCreator = exports.InsurersApi = exports.InsurersApiFactory = exports.InsurersApiFp = exports.InsurersApiAxiosParamCreator = exports.GearBoxTypesApi = exports.GearBoxTypesApiFactory = exports.GearBoxTypesApiFp = exports.GearBoxTypesApiAxiosParamCreator = exports.FaresApi = exports.FaresApiFactory = exports.FaresApiFp = exports.FaresApiAxiosParamCreator = exports.DelaysApi = exports.DelaysApiFactory = exports.DelaysApiFp = exports.DelaysApiAxiosParamCreator = exports.CranesApi = exports.CranesApiFactory = exports.CranesApiFp = exports.CranesApiAxiosParamCreator = exports.ClientsApi = exports.ClientsApiFactory = exports.ClientsApiFp = exports.ClientsApiAxiosParamCreator = exports.BasesApi = exports.BasesApiFactory = exports.BasesApiFp = exports.BasesApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.AnalyticsApi = exports.AnalyticsApiFactory = exports.AnalyticsApiFp = exports.AnalyticsApiAxiosParamCreator = exports.SirEventDtoEventTypeEnum = void 0;
exports.VehicleWheelTypesApi = exports.VehicleWheelTypesApiFactory = exports.VehicleWheelTypesApiFp = exports.VehicleWheelTypesApiAxiosParamCreator = exports.VehicleTypesApi = exports.VehicleTypesApiFactory = exports.VehicleTypesApiFp = exports.VehicleTypesApiAxiosParamCreator = exports.VehicleColorsApi = exports.VehicleColorsApiFactory = exports.VehicleColorsApiFp = exports.VehicleColorsApiAxiosParamCreator = exports.VehicleBrandsApi = exports.VehicleBrandsApiFactory = exports.VehicleBrandsApiFp = exports.VehicleBrandsApiAxiosParamCreator = exports.VehicleBrandModelsApi = exports.VehicleBrandModelsApiFactory = exports.VehicleBrandModelsApiFp = exports.VehicleBrandModelsApiAxiosParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TractionTypesApi = exports.TractionTypesApiFactory = exports.TractionTypesApiFp = exports.TractionTypesApiAxiosParamCreator = exports.TicketsApi = exports.TicketsApiFactory = exports.TicketsApiFp = exports.TicketsApiAxiosParamCreator = exports.SettlementsApi = exports.SettlementsApiFactory = exports.SettlementsApiFp = exports.SettlementsApiAxiosParamCreator = exports.SettingsApi = exports.SettingsApiFactory = exports.SettingsApiFp = exports.SettingsApiAxiosParamCreator = exports.RolesApi = exports.RolesApiFactory = exports.RolesApiFp = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.SirEventDtoEventTypeEnum = {
    Created: 'CREATED',
    Updated: 'UPDATED',
    Deleted: 'DELETED'
};
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
const AnalyticsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get estimated trips
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetEstimatedTrips: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/analytics/estimated-trips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get total active cranes by status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalActiveCranesByStatus: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/analytics/total-active-cranes-by-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get total distance per day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalDistancePerDay: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/analytics/total-distance-per-day`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get total trips for current day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsForCurrentDay: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/analytics/total-trips-for-current-day`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get total trips for current month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsForCurrentMonth: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/analytics/total-trips-for-current-month`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get total trips per insurance company per month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/analytics/total-trips-per-insurance-company-per-month`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get total trips per location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerLocation: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/analytics/total-trips-per-location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get total trips per type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerType: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/analytics/total-trips-per-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get total trips per vehicle type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerVehicleType: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/analytics/total-trips-per-vehicle-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AnalyticsApiAxiosParamCreator = AnalyticsApiAxiosParamCreator;
/**
 * AnalyticsApi - functional programming interface
 * @export
 */
const AnalyticsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AnalyticsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get estimated trips
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetEstimatedTrips(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetEstimatedTrips(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetEstimatedTrips']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get total active cranes by status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalActiveCranesByStatus(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetTotalActiveCranesByStatus(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetTotalActiveCranesByStatus']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get total distance per day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalDistancePerDay(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetTotalDistancePerDay(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetTotalDistancePerDay']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get total trips for current day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsForCurrentDay(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetTotalTripsForCurrentDay(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetTotalTripsForCurrentDay']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get total trips for current month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsForCurrentMonth(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetTotalTripsForCurrentMonth(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetTotalTripsForCurrentMonth']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get total trips per insurance company per month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get total trips per location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerLocation(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetTotalTripsPerLocation(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetTotalTripsPerLocation']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get total trips per type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerType(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetTotalTripsPerType(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetTotalTripsPerType']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get total trips per vehicle type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerVehicleType(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetTotalTripsPerVehicleType(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetTotalTripsPerVehicleType']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.AnalyticsApiFp = AnalyticsApiFp;
/**
 * AnalyticsApi - factory interface
 * @export
 */
const AnalyticsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AnalyticsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get estimated trips
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetEstimatedTrips(options) {
            return localVarFp.analyticsControllerGetEstimatedTrips(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get total active cranes by status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalActiveCranesByStatus(options) {
            return localVarFp.analyticsControllerGetTotalActiveCranesByStatus(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get total distance per day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalDistancePerDay(options) {
            return localVarFp.analyticsControllerGetTotalDistancePerDay(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get total trips for current day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsForCurrentDay(options) {
            return localVarFp.analyticsControllerGetTotalTripsForCurrentDay(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get total trips for current month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsForCurrentMonth(options) {
            return localVarFp.analyticsControllerGetTotalTripsForCurrentMonth(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get total trips per insurance company per month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options) {
            return localVarFp.analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get total trips per location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerLocation(options) {
            return localVarFp.analyticsControllerGetTotalTripsPerLocation(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get total trips per type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerType(options) {
            return localVarFp.analyticsControllerGetTotalTripsPerType(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get total trips per vehicle type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerVehicleType(options) {
            return localVarFp.analyticsControllerGetTotalTripsPerVehicleType(options).then((request) => request(axios, basePath));
        },
    };
};
exports.AnalyticsApiFactory = AnalyticsApiFactory;
/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
class AnalyticsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get estimated trips
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetEstimatedTrips(options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetEstimatedTrips(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get total active cranes by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalActiveCranesByStatus(options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetTotalActiveCranesByStatus(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get total distance per day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalDistancePerDay(options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetTotalDistancePerDay(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get total trips for current day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalTripsForCurrentDay(options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetTotalTripsForCurrentDay(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get total trips for current month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalTripsForCurrentMonth(options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetTotalTripsForCurrentMonth(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get total trips per insurance company per month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get total trips per location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalTripsPerLocation(options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetTotalTripsPerLocation(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get total trips per type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalTripsPerType(options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetTotalTripsPerType(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get total trips per vehicle type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalTripsPerVehicleType(options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetTotalTripsPerVehicleType(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AnalyticsApi = AnalyticsApi;
/**
 * AuthApi - axios parameter creator
 * @export
 */
const AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get current user status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetStatus: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/auth/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary User login
         * @param {LoginDto} loginDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: (loginDto_1, ...args_1) => __awaiter(this, [loginDto_1, ...args_1], void 0, function* (loginDto, options = {}) {
            // verify required parameter 'loginDto' is not null or undefined
            (0, common_1.assertParamExists)('authControllerLogin', 'loginDto', loginDto);
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(loginDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary User logout
         * @param {LogoutDto} logoutDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout: (logoutDto_1, ...args_1) => __awaiter(this, [logoutDto_1, ...args_1], void 0, function* (logoutDto, options = {}) {
            // verify required parameter 'logoutDto' is not null or undefined
            (0, common_1.assertParamExists)('authControllerLogout', 'logoutDto', logoutDto);
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(logoutDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
const AuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get current user status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetStatus(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authControllerGetStatus(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerGetStatus']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary User login
         * @param {LoginDto} loginDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authControllerLogin(loginDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerLogin']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary User logout
         * @param {LogoutDto} logoutDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(logoutDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authControllerLogout(logoutDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerLogout']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
const AuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuthApiFp)(configuration);
    return {
        /**
         *
         * @summary Get current user status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetStatus(options) {
            return localVarFp.authControllerGetStatus(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary User login
         * @param {LoginDto} loginDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginDto, options) {
            return localVarFp.authControllerLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary User logout
         * @param {LogoutDto} logoutDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(logoutDto, options) {
            return localVarFp.authControllerLogout(logoutDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
class AuthApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get current user status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerGetStatus(options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerGetStatus(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary User login
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLogin(loginDto, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary User logout
     * @param {LogoutDto} logoutDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLogout(logoutDto, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerLogout(logoutDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthApi = AuthApi;
/**
 * BasesApi - axios parameter creator
 * @export
 */
const BasesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create base
         * @param {CreateBaseDto} createBaseDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerCreate: (createBaseDto_1, ...args_1) => __awaiter(this, [createBaseDto_1, ...args_1], void 0, function* (createBaseDto, options = {}) {
            // verify required parameter 'createBaseDto' is not null or undefined
            (0, common_1.assertParamExists)('basesControllerCreate', 'createBaseDto', createBaseDto);
            const localVarPath = `/bases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createBaseDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all bases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/bases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a base by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('basesControllerFindOne', 'id', id);
            const localVarPath = `/bases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a base
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('basesControllerRemove', 'id', id);
            const localVarPath = `/bases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a base
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerUpdate: (id_1, body_1, ...args_1) => __awaiter(this, [id_1, body_1, ...args_1], void 0, function* (id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('basesControllerUpdate', 'id', id);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('basesControllerUpdate', 'body', body);
            const localVarPath = `/bases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.BasesApiAxiosParamCreator = BasesApiAxiosParamCreator;
/**
 * BasesApi - functional programming interface
 * @export
 */
const BasesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BasesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create base
         * @param {CreateBaseDto} createBaseDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerCreate(createBaseDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.basesControllerCreate(createBaseDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BasesApi.basesControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all bases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.basesControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BasesApi.basesControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a base by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.basesControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BasesApi.basesControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a base
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.basesControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BasesApi.basesControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a base
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerUpdate(id, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.basesControllerUpdate(id, body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BasesApi.basesControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.BasesApiFp = BasesApiFp;
/**
 * BasesApi - factory interface
 * @export
 */
const BasesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BasesApiFp)(configuration);
    return {
        /**
         *
         * @summary Create base
         * @param {CreateBaseDto} createBaseDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerCreate(createBaseDto, options) {
            return localVarFp.basesControllerCreate(createBaseDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all bases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerFindAll(options) {
            return localVarFp.basesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a base by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerFindOne(id, options) {
            return localVarFp.basesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a base
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerRemove(id, options) {
            return localVarFp.basesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a base
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerUpdate(id, body, options) {
            return localVarFp.basesControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.BasesApiFactory = BasesApiFactory;
/**
 * BasesApi - object-oriented interface
 * @export
 * @class BasesApi
 * @extends {BaseAPI}
 */
class BasesApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create base
     * @param {CreateBaseDto} createBaseDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    basesControllerCreate(createBaseDto, options) {
        return (0, exports.BasesApiFp)(this.configuration).basesControllerCreate(createBaseDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all bases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    basesControllerFindAll(options) {
        return (0, exports.BasesApiFp)(this.configuration).basesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a base by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    basesControllerFindOne(id, options) {
        return (0, exports.BasesApiFp)(this.configuration).basesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a base
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    basesControllerRemove(id, options) {
        return (0, exports.BasesApiFp)(this.configuration).basesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a base
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    basesControllerUpdate(id, body, options) {
        return (0, exports.BasesApiFp)(this.configuration).basesControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BasesApi = BasesApi;
/**
 * ClientsApi - axios parameter creator
 * @export
 */
const ClientsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create client
         * @param {CreateClientDto} createClientDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerCreate: (createClientDto_1, ...args_1) => __awaiter(this, [createClientDto_1, ...args_1], void 0, function* (createClientDto, options = {}) {
            // verify required parameter 'createClientDto' is not null or undefined
            (0, common_1.assertParamExists)('clientsControllerCreate', 'createClientDto', createClientDto);
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createClientDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a client by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('clientsControllerFindOne', 'id', id);
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a client
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('clientsControllerRemove', 'id', id);
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a client
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerUpdate: (id_1, body_1, ...args_1) => __awaiter(this, [id_1, body_1, ...args_1], void 0, function* (id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('clientsControllerUpdate', 'id', id);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('clientsControllerUpdate', 'body', body);
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ClientsApiAxiosParamCreator = ClientsApiAxiosParamCreator;
/**
 * ClientsApi - functional programming interface
 * @export
 */
const ClientsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ClientsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create client
         * @param {CreateClientDto} createClientDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerCreate(createClientDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.clientsControllerCreate(createClientDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ClientsApi.clientsControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.clientsControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ClientsApi.clientsControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a client by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.clientsControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ClientsApi.clientsControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a client
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.clientsControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ClientsApi.clientsControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a client
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerUpdate(id, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.clientsControllerUpdate(id, body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ClientsApi.clientsControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.ClientsApiFp = ClientsApiFp;
/**
 * ClientsApi - factory interface
 * @export
 */
const ClientsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ClientsApiFp)(configuration);
    return {
        /**
         *
         * @summary Create client
         * @param {CreateClientDto} createClientDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerCreate(createClientDto, options) {
            return localVarFp.clientsControllerCreate(createClientDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindAll(options) {
            return localVarFp.clientsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a client by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindOne(id, options) {
            return localVarFp.clientsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a client
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerRemove(id, options) {
            return localVarFp.clientsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a client
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerUpdate(id, body, options) {
            return localVarFp.clientsControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ClientsApiFactory = ClientsApiFactory;
/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
class ClientsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create client
     * @param {CreateClientDto} createClientDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    clientsControllerCreate(createClientDto, options) {
        return (0, exports.ClientsApiFp)(this.configuration).clientsControllerCreate(createClientDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    clientsControllerFindAll(options) {
        return (0, exports.ClientsApiFp)(this.configuration).clientsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a client by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    clientsControllerFindOne(id, options) {
        return (0, exports.ClientsApiFp)(this.configuration).clientsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    clientsControllerRemove(id, options) {
        return (0, exports.ClientsApiFp)(this.configuration).clientsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a client
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    clientsControllerUpdate(id, body, options) {
        return (0, exports.ClientsApiFp)(this.configuration).clientsControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ClientsApi = ClientsApi;
/**
 * CranesApi - axios parameter creator
 * @export
 */
const CranesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Assign a crane to a user
         * @param {AssignCraneDto} assignCraneDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerAssign: (assignCraneDto_1, ...args_1) => __awaiter(this, [assignCraneDto_1, ...args_1], void 0, function* (assignCraneDto, options = {}) {
            // verify required parameter 'assignCraneDto' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerAssign', 'assignCraneDto', assignCraneDto);
            const localVarPath = `/cranes/assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(assignCraneDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create crane
         * @param {CreateCraneDto} createCraneDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerCreate: (createCraneDto_1, ...args_1) => __awaiter(this, [createCraneDto_1, ...args_1], void 0, function* (createCraneDto, options = {}) {
            // verify required parameter 'createCraneDto' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerCreate', 'createCraneDto', createCraneDto);
            const localVarPath = `/cranes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createCraneDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Calculate distance to a point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPoint: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/cranes/distanceToPoint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Calculate distance to a point using an external API
         * @param {number} craneId
         * @param {number} lat
         * @param {number} lng
         * @param {number} currentTicketId
         * @param {number} ticketTypeid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPointApi: (craneId_1, lat_1, lng_1, currentTicketId_1, ticketTypeid_1, ...args_1) => __awaiter(this, [craneId_1, lat_1, lng_1, currentTicketId_1, ticketTypeid_1, ...args_1], void 0, function* (craneId, lat, lng, currentTicketId, ticketTypeid, options = {}) {
            // verify required parameter 'craneId' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerDistanceToPointApi', 'craneId', craneId);
            // verify required parameter 'lat' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerDistanceToPointApi', 'lat', lat);
            // verify required parameter 'lng' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerDistanceToPointApi', 'lng', lng);
            // verify required parameter 'currentTicketId' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerDistanceToPointApi', 'currentTicketId', currentTicketId);
            // verify required parameter 'ticketTypeid' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerDistanceToPointApi', 'ticketTypeid', ticketTypeid);
            const localVarPath = `/cranes/distance-to-point-api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (craneId !== undefined) {
                localVarQueryParameter['craneId'] = craneId;
            }
            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }
            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }
            if (currentTicketId !== undefined) {
                localVarQueryParameter['currentTicketId'] = currentTicketId;
            }
            if (ticketTypeid !== undefined) {
                localVarQueryParameter['ticketTypeid'] = ticketTypeid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Calculate distance to a point for a specific crane
         * @param {string} id
         * @param {string} lat
         * @param {string} lng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPointByCrane: (id_1, lat_1, lng_1, ...args_1) => __awaiter(this, [id_1, lat_1, lng_1, ...args_1], void 0, function* (id, lat, lng, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerDistanceToPointByCrane', 'id', id);
            // verify required parameter 'lat' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerDistanceToPointByCrane', 'lat', lat);
            // verify required parameter 'lng' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerDistanceToPointByCrane', 'lng', lng);
            const localVarPath = `/cranes/{id}/distance-to-point`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }
            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all cranes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/cranes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a crane by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerFindOne', 'id', id);
            const localVarPath = `/cranes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all crane locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetAllCranesLocations: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/cranes/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get the assignment history of a crane
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCraneHistory: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerGetCraneHistory', 'id', id);
            const localVarPath = `/cranes/historyAssigned/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get cranes with finished drives
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCranesDriveFinished: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/cranes/cranesDriveFinished`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get the status of all cranes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCranesStatus: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/cranes/cranesStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a crane
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerRemove', 'id', id);
            const localVarPath = `/cranes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Unassign a crane from a user
         * @param {UnassignCraneDto} unassignCraneDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerUnassign: (unassignCraneDto_1, ...args_1) => __awaiter(this, [unassignCraneDto_1, ...args_1], void 0, function* (unassignCraneDto, options = {}) {
            // verify required parameter 'unassignCraneDto' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerUnassign', 'unassignCraneDto', unassignCraneDto);
            const localVarPath = `/cranes/unassign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(unassignCraneDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a crane
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerUpdate: (id_1, body_1, ...args_1) => __awaiter(this, [id_1, body_1, ...args_1], void 0, function* (id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerUpdate', 'id', id);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('cranesControllerUpdate', 'body', body);
            const localVarPath = `/cranes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.CranesApiAxiosParamCreator = CranesApiAxiosParamCreator;
/**
 * CranesApi - functional programming interface
 * @export
 */
const CranesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CranesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Assign a crane to a user
         * @param {AssignCraneDto} assignCraneDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerAssign(assignCraneDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerAssign(assignCraneDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerAssign']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Create crane
         * @param {CreateCraneDto} createCraneDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerCreate(createCraneDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerCreate(createCraneDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Calculate distance to a point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPoint(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerDistanceToPoint(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerDistanceToPoint']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Calculate distance to a point using an external API
         * @param {number} craneId
         * @param {number} lat
         * @param {number} lng
         * @param {number} currentTicketId
         * @param {number} ticketTypeid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPointApi(craneId, lat, lng, currentTicketId, ticketTypeid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerDistanceToPointApi(craneId, lat, lng, currentTicketId, ticketTypeid, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerDistanceToPointApi']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Calculate distance to a point for a specific crane
         * @param {string} id
         * @param {string} lat
         * @param {string} lng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPointByCrane(id, lat, lng, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerDistanceToPointByCrane(id, lat, lng, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerDistanceToPointByCrane']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all cranes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a crane by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all crane locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetAllCranesLocations(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerGetAllCranesLocations(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerGetAllCranesLocations']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get the assignment history of a crane
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCraneHistory(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerGetCraneHistory(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerGetCraneHistory']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get cranes with finished drives
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCranesDriveFinished(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerGetCranesDriveFinished(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerGetCranesDriveFinished']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get the status of all cranes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCranesStatus(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerGetCranesStatus(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerGetCranesStatus']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a crane
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Unassign a crane from a user
         * @param {UnassignCraneDto} unassignCraneDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerUnassign(unassignCraneDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerUnassign(unassignCraneDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerUnassign']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a crane
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerUpdate(id, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cranesControllerUpdate(id, body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CranesApi.cranesControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.CranesApiFp = CranesApiFp;
/**
 * CranesApi - factory interface
 * @export
 */
const CranesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CranesApiFp)(configuration);
    return {
        /**
         *
         * @summary Assign a crane to a user
         * @param {AssignCraneDto} assignCraneDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerAssign(assignCraneDto, options) {
            return localVarFp.cranesControllerAssign(assignCraneDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create crane
         * @param {CreateCraneDto} createCraneDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerCreate(createCraneDto, options) {
            return localVarFp.cranesControllerCreate(createCraneDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Calculate distance to a point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPoint(options) {
            return localVarFp.cranesControllerDistanceToPoint(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Calculate distance to a point using an external API
         * @param {number} craneId
         * @param {number} lat
         * @param {number} lng
         * @param {number} currentTicketId
         * @param {number} ticketTypeid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPointApi(craneId, lat, lng, currentTicketId, ticketTypeid, options) {
            return localVarFp.cranesControllerDistanceToPointApi(craneId, lat, lng, currentTicketId, ticketTypeid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Calculate distance to a point for a specific crane
         * @param {string} id
         * @param {string} lat
         * @param {string} lng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPointByCrane(id, lat, lng, options) {
            return localVarFp.cranesControllerDistanceToPointByCrane(id, lat, lng, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all cranes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerFindAll(options) {
            return localVarFp.cranesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a crane by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerFindOne(id, options) {
            return localVarFp.cranesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all crane locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetAllCranesLocations(options) {
            return localVarFp.cranesControllerGetAllCranesLocations(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get the assignment history of a crane
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCraneHistory(id, options) {
            return localVarFp.cranesControllerGetCraneHistory(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get cranes with finished drives
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCranesDriveFinished(options) {
            return localVarFp.cranesControllerGetCranesDriveFinished(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get the status of all cranes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCranesStatus(options) {
            return localVarFp.cranesControllerGetCranesStatus(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a crane
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerRemove(id, options) {
            return localVarFp.cranesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Unassign a crane from a user
         * @param {UnassignCraneDto} unassignCraneDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerUnassign(unassignCraneDto, options) {
            return localVarFp.cranesControllerUnassign(unassignCraneDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a crane
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerUpdate(id, body, options) {
            return localVarFp.cranesControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CranesApiFactory = CranesApiFactory;
/**
 * CranesApi - object-oriented interface
 * @export
 * @class CranesApi
 * @extends {BaseAPI}
 */
class CranesApi extends base_1.BaseAPI {
    /**
     *
     * @summary Assign a crane to a user
     * @param {AssignCraneDto} assignCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerAssign(assignCraneDto, options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerAssign(assignCraneDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create crane
     * @param {CreateCraneDto} createCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerCreate(createCraneDto, options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerCreate(createCraneDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Calculate distance to a point
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerDistanceToPoint(options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerDistanceToPoint(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Calculate distance to a point using an external API
     * @param {number} craneId
     * @param {number} lat
     * @param {number} lng
     * @param {number} currentTicketId
     * @param {number} ticketTypeid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerDistanceToPointApi(craneId, lat, lng, currentTicketId, ticketTypeid, options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerDistanceToPointApi(craneId, lat, lng, currentTicketId, ticketTypeid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Calculate distance to a point for a specific crane
     * @param {string} id
     * @param {string} lat
     * @param {string} lng
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerDistanceToPointByCrane(id, lat, lng, options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerDistanceToPointByCrane(id, lat, lng, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all cranes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerFindAll(options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a crane by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerFindOne(id, options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all crane locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerGetAllCranesLocations(options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerGetAllCranesLocations(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get the assignment history of a crane
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerGetCraneHistory(id, options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerGetCraneHistory(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get cranes with finished drives
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerGetCranesDriveFinished(options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerGetCranesDriveFinished(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get the status of all cranes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerGetCranesStatus(options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerGetCranesStatus(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a crane
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerRemove(id, options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Unassign a crane from a user
     * @param {UnassignCraneDto} unassignCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerUnassign(unassignCraneDto, options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerUnassign(unassignCraneDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a crane
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerUpdate(id, body, options) {
        return (0, exports.CranesApiFp)(this.configuration).cranesControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CranesApi = CranesApi;
/**
 * DelaysApi - axios parameter creator
 * @export
 */
const DelaysApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary List all delay values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delaysControllerFindAllDelayValues: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/delays/values`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a delay value by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delaysControllerFindOneDelayValue: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('delaysControllerFindOneDelayValue', 'id', id);
            const localVarPath = `/delays/values/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DelaysApiAxiosParamCreator = DelaysApiAxiosParamCreator;
/**
 * DelaysApi - functional programming interface
 * @export
 */
const DelaysApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DelaysApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary List all delay values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delaysControllerFindAllDelayValues(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.delaysControllerFindAllDelayValues(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DelaysApi.delaysControllerFindAllDelayValues']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a delay value by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delaysControllerFindOneDelayValue(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.delaysControllerFindOneDelayValue(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DelaysApi.delaysControllerFindOneDelayValue']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.DelaysApiFp = DelaysApiFp;
/**
 * DelaysApi - factory interface
 * @export
 */
const DelaysApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DelaysApiFp)(configuration);
    return {
        /**
         *
         * @summary List all delay values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delaysControllerFindAllDelayValues(options) {
            return localVarFp.delaysControllerFindAllDelayValues(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a delay value by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delaysControllerFindOneDelayValue(id, options) {
            return localVarFp.delaysControllerFindOneDelayValue(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DelaysApiFactory = DelaysApiFactory;
/**
 * DelaysApi - object-oriented interface
 * @export
 * @class DelaysApi
 * @extends {BaseAPI}
 */
class DelaysApi extends base_1.BaseAPI {
    /**
     *
     * @summary List all delay values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelaysApi
     */
    delaysControllerFindAllDelayValues(options) {
        return (0, exports.DelaysApiFp)(this.configuration).delaysControllerFindAllDelayValues(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a delay value by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelaysApi
     */
    delaysControllerFindOneDelayValue(id, options) {
        return (0, exports.DelaysApiFp)(this.configuration).delaysControllerFindOneDelayValue(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DelaysApi = DelaysApi;
/**
 * FaresApi - axios parameter creator
 * @export
 */
const FaresApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerCreate: (body_1, ...args_1) => __awaiter(this, [body_1, ...args_1], void 0, function* (body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('faresControllerCreate', 'body', body);
            const localVarPath = `/fares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/fares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('faresControllerFindOne', 'id', id);
            const localVarPath = `/fares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('faresControllerRemove', 'id', id);
            const localVarPath = `/fares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerUpdate: (id_1, body_1, ...args_1) => __awaiter(this, [id_1, body_1, ...args_1], void 0, function* (id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('faresControllerUpdate', 'id', id);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('faresControllerUpdate', 'body', body);
            const localVarPath = `/fares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.FaresApiAxiosParamCreator = FaresApiAxiosParamCreator;
/**
 * FaresApi - functional programming interface
 * @export
 */
const FaresApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FaresApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerCreate(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.faresControllerCreate(body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FaresApi.faresControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.faresControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FaresApi.faresControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.faresControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FaresApi.faresControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.faresControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FaresApi.faresControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerUpdate(id, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.faresControllerUpdate(id, body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FaresApi.faresControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.FaresApiFp = FaresApiFp;
/**
 * FaresApi - factory interface
 * @export
 */
const FaresApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FaresApiFp)(configuration);
    return {
        /**
         *
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerCreate(body, options) {
            return localVarFp.faresControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerFindAll(options) {
            return localVarFp.faresControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerFindOne(id, options) {
            return localVarFp.faresControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerRemove(id, options) {
            return localVarFp.faresControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerUpdate(id, body, options) {
            return localVarFp.faresControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FaresApiFactory = FaresApiFactory;
/**
 * FaresApi - object-oriented interface
 * @export
 * @class FaresApi
 * @extends {BaseAPI}
 */
class FaresApi extends base_1.BaseAPI {
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    faresControllerCreate(body, options) {
        return (0, exports.FaresApiFp)(this.configuration).faresControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    faresControllerFindAll(options) {
        return (0, exports.FaresApiFp)(this.configuration).faresControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    faresControllerFindOne(id, options) {
        return (0, exports.FaresApiFp)(this.configuration).faresControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    faresControllerRemove(id, options) {
        return (0, exports.FaresApiFp)(this.configuration).faresControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    faresControllerUpdate(id, body, options) {
        return (0, exports.FaresApiFp)(this.configuration).faresControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FaresApi = FaresApi;
/**
 * GearBoxTypesApi - axios parameter creator
 * @export
 */
const GearBoxTypesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary List all gear box types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearBoxTypesControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/gear-box-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a gear box type by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearBoxTypesControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('gearBoxTypesControllerFindOne', 'id', id);
            const localVarPath = `/gear-box-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.GearBoxTypesApiAxiosParamCreator = GearBoxTypesApiAxiosParamCreator;
/**
 * GearBoxTypesApi - functional programming interface
 * @export
 */
const GearBoxTypesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.GearBoxTypesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary List all gear box types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearBoxTypesControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.gearBoxTypesControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GearBoxTypesApi.gearBoxTypesControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a gear box type by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearBoxTypesControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.gearBoxTypesControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GearBoxTypesApi.gearBoxTypesControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.GearBoxTypesApiFp = GearBoxTypesApiFp;
/**
 * GearBoxTypesApi - factory interface
 * @export
 */
const GearBoxTypesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.GearBoxTypesApiFp)(configuration);
    return {
        /**
         *
         * @summary List all gear box types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearBoxTypesControllerFindAll(options) {
            return localVarFp.gearBoxTypesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a gear box type by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearBoxTypesControllerFindOne(id, options) {
            return localVarFp.gearBoxTypesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.GearBoxTypesApiFactory = GearBoxTypesApiFactory;
/**
 * GearBoxTypesApi - object-oriented interface
 * @export
 * @class GearBoxTypesApi
 * @extends {BaseAPI}
 */
class GearBoxTypesApi extends base_1.BaseAPI {
    /**
     *
     * @summary List all gear box types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GearBoxTypesApi
     */
    gearBoxTypesControllerFindAll(options) {
        return (0, exports.GearBoxTypesApiFp)(this.configuration).gearBoxTypesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a gear box type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GearBoxTypesApi
     */
    gearBoxTypesControllerFindOne(id, options) {
        return (0, exports.GearBoxTypesApiFp)(this.configuration).gearBoxTypesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.GearBoxTypesApi = GearBoxTypesApi;
/**
 * InsurersApi - axios parameter creator
 * @export
 */
const InsurersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create insurer
         * @param {CreateInsurerDto} createInsurerDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerCreate: (createInsurerDto_1, ...args_1) => __awaiter(this, [createInsurerDto_1, ...args_1], void 0, function* (createInsurerDto, options = {}) {
            // verify required parameter 'createInsurerDto' is not null or undefined
            (0, common_1.assertParamExists)('insurersControllerCreate', 'createInsurerDto', createInsurerDto);
            const localVarPath = `/insurers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createInsurerDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all insurers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/insurers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get an insurer by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('insurersControllerFindOne', 'id', id);
            const localVarPath = `/insurers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete an insurer
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('insurersControllerRemove', 'id', id);
            const localVarPath = `/insurers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update an insurer
         * @param {string} id
         * @param {UpdateInsurerDto} updateInsurerDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerUpdate: (id_1, updateInsurerDto_1, ...args_1) => __awaiter(this, [id_1, updateInsurerDto_1, ...args_1], void 0, function* (id, updateInsurerDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('insurersControllerUpdate', 'id', id);
            // verify required parameter 'updateInsurerDto' is not null or undefined
            (0, common_1.assertParamExists)('insurersControllerUpdate', 'updateInsurerDto', updateInsurerDto);
            const localVarPath = `/insurers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateInsurerDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.InsurersApiAxiosParamCreator = InsurersApiAxiosParamCreator;
/**
 * InsurersApi - functional programming interface
 * @export
 */
const InsurersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.InsurersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create insurer
         * @param {CreateInsurerDto} createInsurerDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerCreate(createInsurerDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.insurersControllerCreate(createInsurerDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['InsurersApi.insurersControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all insurers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.insurersControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['InsurersApi.insurersControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get an insurer by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.insurersControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['InsurersApi.insurersControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete an insurer
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.insurersControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['InsurersApi.insurersControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update an insurer
         * @param {string} id
         * @param {UpdateInsurerDto} updateInsurerDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerUpdate(id, updateInsurerDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.insurersControllerUpdate(id, updateInsurerDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['InsurersApi.insurersControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.InsurersApiFp = InsurersApiFp;
/**
 * InsurersApi - factory interface
 * @export
 */
const InsurersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.InsurersApiFp)(configuration);
    return {
        /**
         *
         * @summary Create insurer
         * @param {CreateInsurerDto} createInsurerDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerCreate(createInsurerDto, options) {
            return localVarFp.insurersControllerCreate(createInsurerDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all insurers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerFindAll(options) {
            return localVarFp.insurersControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get an insurer by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerFindOne(id, options) {
            return localVarFp.insurersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete an insurer
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerRemove(id, options) {
            return localVarFp.insurersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an insurer
         * @param {string} id
         * @param {UpdateInsurerDto} updateInsurerDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerUpdate(id, updateInsurerDto, options) {
            return localVarFp.insurersControllerUpdate(id, updateInsurerDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.InsurersApiFactory = InsurersApiFactory;
/**
 * InsurersApi - object-oriented interface
 * @export
 * @class InsurersApi
 * @extends {BaseAPI}
 */
class InsurersApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create insurer
     * @param {CreateInsurerDto} createInsurerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    insurersControllerCreate(createInsurerDto, options) {
        return (0, exports.InsurersApiFp)(this.configuration).insurersControllerCreate(createInsurerDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all insurers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    insurersControllerFindAll(options) {
        return (0, exports.InsurersApiFp)(this.configuration).insurersControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get an insurer by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    insurersControllerFindOne(id, options) {
        return (0, exports.InsurersApiFp)(this.configuration).insurersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete an insurer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    insurersControllerRemove(id, options) {
        return (0, exports.InsurersApiFp)(this.configuration).insurersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update an insurer
     * @param {string} id
     * @param {UpdateInsurerDto} updateInsurerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    insurersControllerUpdate(id, updateInsurerDto, options) {
        return (0, exports.InsurersApiFp)(this.configuration).insurersControllerUpdate(id, updateInsurerDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.InsurersApi = InsurersApi;
/**
 * LocationsApi - axios parameter creator
 * @export
 */
const LocationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create location
         * @param {CreateLocationDto} createLocationDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerCreate: (createLocationDto_1, ...args_1) => __awaiter(this, [createLocationDto_1, ...args_1], void 0, function* (createLocationDto, options = {}) {
            // verify required parameter 'createLocationDto' is not null or undefined
            (0, common_1.assertParamExists)('locationsControllerCreate', 'createLocationDto', createLocationDto);
            const localVarPath = `/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createLocationDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a location by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('locationsControllerFindOne', 'id', id);
            const localVarPath = `/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a location
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('locationsControllerRemove', 'id', id);
            const localVarPath = `/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a location
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerUpdate: (id_1, body_1, ...args_1) => __awaiter(this, [id_1, body_1, ...args_1], void 0, function* (id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('locationsControllerUpdate', 'id', id);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('locationsControllerUpdate', 'body', body);
            const localVarPath = `/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.LocationsApiAxiosParamCreator = LocationsApiAxiosParamCreator;
/**
 * LocationsApi - functional programming interface
 * @export
 */
const LocationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.LocationsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create location
         * @param {CreateLocationDto} createLocationDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerCreate(createLocationDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.locationsControllerCreate(createLocationDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LocationsApi.locationsControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.locationsControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LocationsApi.locationsControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a location by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.locationsControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LocationsApi.locationsControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a location
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.locationsControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LocationsApi.locationsControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a location
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerUpdate(id, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.locationsControllerUpdate(id, body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LocationsApi.locationsControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.LocationsApiFp = LocationsApiFp;
/**
 * LocationsApi - factory interface
 * @export
 */
const LocationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.LocationsApiFp)(configuration);
    return {
        /**
         *
         * @summary Create location
         * @param {CreateLocationDto} createLocationDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerCreate(createLocationDto, options) {
            return localVarFp.locationsControllerCreate(createLocationDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerFindAll(options) {
            return localVarFp.locationsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a location by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerFindOne(id, options) {
            return localVarFp.locationsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a location
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerRemove(id, options) {
            return localVarFp.locationsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a location
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerUpdate(id, body, options) {
            return localVarFp.locationsControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.LocationsApiFactory = LocationsApiFactory;
/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
class LocationsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create location
     * @param {CreateLocationDto} createLocationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    locationsControllerCreate(createLocationDto, options) {
        return (0, exports.LocationsApiFp)(this.configuration).locationsControllerCreate(createLocationDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    locationsControllerFindAll(options) {
        return (0, exports.LocationsApiFp)(this.configuration).locationsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a location by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    locationsControllerFindOne(id, options) {
        return (0, exports.LocationsApiFp)(this.configuration).locationsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a location
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    locationsControllerRemove(id, options) {
        return (0, exports.LocationsApiFp)(this.configuration).locationsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a location
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    locationsControllerUpdate(id, body, options) {
        return (0, exports.LocationsApiFp)(this.configuration).locationsControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LocationsApi = LocationsApi;
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
const PaymentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary List all payment types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerFindAllPaymentTypes: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/payments/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.PaymentsApiAxiosParamCreator = PaymentsApiAxiosParamCreator;
/**
 * PaymentsApi - functional programming interface
 * @export
 */
const PaymentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PaymentsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary List all payment types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerFindAllPaymentTypes(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentsControllerFindAllPaymentTypes(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaymentsApi.paymentsControllerFindAllPaymentTypes']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.PaymentsApiFp = PaymentsApiFp;
/**
 * PaymentsApi - factory interface
 * @export
 */
const PaymentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PaymentsApiFp)(configuration);
    return {
        /**
         *
         * @summary List all payment types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerFindAllPaymentTypes(options) {
            return localVarFp.paymentsControllerFindAllPaymentTypes(options).then((request) => request(axios, basePath));
        },
    };
};
exports.PaymentsApiFactory = PaymentsApiFactory;
/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
class PaymentsApi extends base_1.BaseAPI {
    /**
     *
     * @summary List all payment types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    paymentsControllerFindAllPaymentTypes(options) {
        return (0, exports.PaymentsApiFp)(this.configuration).paymentsControllerFindAllPaymentTypes(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PaymentsApi = PaymentsApi;
/**
 * ReportsApi - axios parameter creator
 * @export
 */
const ReportsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary List all reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Request trips per day report
         * @param {TripsPerDayDto} tripsPerDayDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerRequestTripsPerDay: (tripsPerDayDto_1, ...args_1) => __awaiter(this, [tripsPerDayDto_1, ...args_1], void 0, function* (tripsPerDayDto, options = {}) {
            // verify required parameter 'tripsPerDayDto' is not null or undefined
            (0, common_1.assertParamExists)('reportsControllerRequestTripsPerDay', 'tripsPerDayDto', tripsPerDayDto);
            const localVarPath = `/reports/request-trips-per-day`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tripsPerDayDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Request trips status changes report
         * @param {TripsStatusChangesDto} tripsStatusChangesDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerRequestTripsStatusChanges: (tripsStatusChangesDto_1, ...args_1) => __awaiter(this, [tripsStatusChangesDto_1, ...args_1], void 0, function* (tripsStatusChangesDto, options = {}) {
            // verify required parameter 'tripsStatusChangesDto' is not null or undefined
            (0, common_1.assertParamExists)('reportsControllerRequestTripsStatusChanges', 'tripsStatusChangesDto', tripsStatusChangesDto);
            const localVarPath = `/reports/request-trips-status-changes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tripsStatusChangesDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ReportsApiAxiosParamCreator = ReportsApiAxiosParamCreator;
/**
 * ReportsApi - functional programming interface
 * @export
 */
const ReportsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ReportsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary List all reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.reportsControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Request trips per day report
         * @param {TripsPerDayDto} tripsPerDayDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerRequestTripsPerDay(tripsPerDayDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.reportsControllerRequestTripsPerDay(tripsPerDayDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerRequestTripsPerDay']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Request trips status changes report
         * @param {TripsStatusChangesDto} tripsStatusChangesDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerRequestTripsStatusChanges']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.ReportsApiFp = ReportsApiFp;
/**
 * ReportsApi - factory interface
 * @export
 */
const ReportsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ReportsApiFp)(configuration);
    return {
        /**
         *
         * @summary List all reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerFindAll(options) {
            return localVarFp.reportsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Request trips per day report
         * @param {TripsPerDayDto} tripsPerDayDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerRequestTripsPerDay(tripsPerDayDto, options) {
            return localVarFp.reportsControllerRequestTripsPerDay(tripsPerDayDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Request trips status changes report
         * @param {TripsStatusChangesDto} tripsStatusChangesDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto, options) {
            return localVarFp.reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ReportsApiFactory = ReportsApiFactory;
/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
class ReportsApi extends base_1.BaseAPI {
    /**
     *
     * @summary List all reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerFindAll(options) {
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Request trips per day report
     * @param {TripsPerDayDto} tripsPerDayDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerRequestTripsPerDay(tripsPerDayDto, options) {
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerRequestTripsPerDay(tripsPerDayDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Request trips status changes report
     * @param {TripsStatusChangesDto} tripsStatusChangesDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto, options) {
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ReportsApi = ReportsApi;
/**
 * RolesApi - axios parameter creator
 * @export
 */
const RolesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create role
         * @param {CreateRoleDto} createRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreate: (createRoleDto_1, ...args_1) => __awaiter(this, [createRoleDto_1, ...args_1], void 0, function* (createRoleDto, options = {}) {
            // verify required parameter 'createRoleDto' is not null or undefined
            (0, common_1.assertParamExists)('rolesControllerCreate', 'createRoleDto', createRoleDto);
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createRoleDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a role by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('rolesControllerFindOne', 'id', id);
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a role
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('rolesControllerRemove', 'id', id);
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a role
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdate: (id_1, body_1, ...args_1) => __awaiter(this, [id_1, body_1, ...args_1], void 0, function* (id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('rolesControllerUpdate', 'id', id);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('rolesControllerUpdate', 'body', body);
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.RolesApiAxiosParamCreator = RolesApiAxiosParamCreator;
/**
 * RolesApi - functional programming interface
 * @export
 */
const RolesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.RolesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create role
         * @param {CreateRoleDto} createRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreate(createRoleDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rolesControllerCreate(createRoleDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rolesControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a role by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rolesControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a role
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rolesControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a role
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdate(id, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rolesControllerUpdate(id, body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.RolesApiFp = RolesApiFp;
/**
 * RolesApi - factory interface
 * @export
 */
const RolesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.RolesApiFp)(configuration);
    return {
        /**
         *
         * @summary Create role
         * @param {CreateRoleDto} createRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreate(createRoleDto, options) {
            return localVarFp.rolesControllerCreate(createRoleDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindAll(options) {
            return localVarFp.rolesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a role by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindOne(id, options) {
            return localVarFp.rolesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a role
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerRemove(id, options) {
            return localVarFp.rolesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a role
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdate(id, body, options) {
            return localVarFp.rolesControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.RolesApiFactory = RolesApiFactory;
/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
class RolesApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create role
     * @param {CreateRoleDto} createRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerCreate(createRoleDto, options) {
        return (0, exports.RolesApiFp)(this.configuration).rolesControllerCreate(createRoleDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerFindAll(options) {
        return (0, exports.RolesApiFp)(this.configuration).rolesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a role by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerFindOne(id, options) {
        return (0, exports.RolesApiFp)(this.configuration).rolesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a role
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerRemove(id, options) {
        return (0, exports.RolesApiFp)(this.configuration).rolesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a role
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerUpdate(id, body, options) {
        return (0, exports.RolesApiFp)(this.configuration).rolesControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RolesApi = RolesApi;
/**
 * SettingsApi - axios parameter creator
 * @export
 */
const SettingsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create setting
         * @param {CreateSettingDto} createSettingDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerCreate: (createSettingDto_1, ...args_1) => __awaiter(this, [createSettingDto_1, ...args_1], void 0, function* (createSettingDto, options = {}) {
            // verify required parameter 'createSettingDto' is not null or undefined
            (0, common_1.assertParamExists)('settingsControllerCreate', 'createSettingDto', createSettingDto);
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createSettingDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a setting by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('settingsControllerFindOne', 'id', id);
            const localVarPath = `/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a setting
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('settingsControllerRemove', 'id', id);
            const localVarPath = `/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a setting
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerUpdate: (id_1, body_1, ...args_1) => __awaiter(this, [id_1, body_1, ...args_1], void 0, function* (id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('settingsControllerUpdate', 'id', id);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('settingsControllerUpdate', 'body', body);
            const localVarPath = `/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SettingsApiAxiosParamCreator = SettingsApiAxiosParamCreator;
/**
 * SettingsApi - functional programming interface
 * @export
 */
const SettingsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SettingsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create setting
         * @param {CreateSettingDto} createSettingDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerCreate(createSettingDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.settingsControllerCreate(createSettingDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SettingsApi.settingsControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.settingsControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SettingsApi.settingsControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a setting by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.settingsControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SettingsApi.settingsControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a setting
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.settingsControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SettingsApi.settingsControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a setting
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerUpdate(id, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.settingsControllerUpdate(id, body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SettingsApi.settingsControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.SettingsApiFp = SettingsApiFp;
/**
 * SettingsApi - factory interface
 * @export
 */
const SettingsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SettingsApiFp)(configuration);
    return {
        /**
         *
         * @summary Create setting
         * @param {CreateSettingDto} createSettingDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerCreate(createSettingDto, options) {
            return localVarFp.settingsControllerCreate(createSettingDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindAll(options) {
            return localVarFp.settingsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a setting by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindOne(id, options) {
            return localVarFp.settingsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a setting
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerRemove(id, options) {
            return localVarFp.settingsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a setting
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerUpdate(id, body, options) {
            return localVarFp.settingsControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SettingsApiFactory = SettingsApiFactory;
/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
class SettingsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create setting
     * @param {CreateSettingDto} createSettingDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    settingsControllerCreate(createSettingDto, options) {
        return (0, exports.SettingsApiFp)(this.configuration).settingsControllerCreate(createSettingDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    settingsControllerFindAll(options) {
        return (0, exports.SettingsApiFp)(this.configuration).settingsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a setting by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    settingsControllerFindOne(id, options) {
        return (0, exports.SettingsApiFp)(this.configuration).settingsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a setting
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    settingsControllerRemove(id, options) {
        return (0, exports.SettingsApiFp)(this.configuration).settingsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a setting
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    settingsControllerUpdate(id, body, options) {
        return (0, exports.SettingsApiFp)(this.configuration).settingsControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SettingsApi = SettingsApi;
/**
 * SettlementsApi - axios parameter creator
 * @export
 */
const SettlementsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Calculate settlements for providers (TODO: Remove)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerCalculateForDrivers: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/settlements/provider`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all settlements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/settlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Request settlement email
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerRequestEmail: (body_1, ...args_1) => __awaiter(this, [body_1, ...args_1], void 0, function* (body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('settlementsControllerRequestEmail', 'body', body);
            const localVarPath = `/settlements/request-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SettlementsApiAxiosParamCreator = SettlementsApiAxiosParamCreator;
/**
 * SettlementsApi - functional programming interface
 * @export
 */
const SettlementsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SettlementsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Calculate settlements for providers (TODO: Remove)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerCalculateForDrivers(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.settlementsControllerCalculateForDrivers(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SettlementsApi.settlementsControllerCalculateForDrivers']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all settlements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.settlementsControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SettlementsApi.settlementsControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Request settlement email
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerRequestEmail(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.settlementsControllerRequestEmail(body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SettlementsApi.settlementsControllerRequestEmail']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.SettlementsApiFp = SettlementsApiFp;
/**
 * SettlementsApi - factory interface
 * @export
 */
const SettlementsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SettlementsApiFp)(configuration);
    return {
        /**
         *
         * @summary Calculate settlements for providers (TODO: Remove)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerCalculateForDrivers(options) {
            return localVarFp.settlementsControllerCalculateForDrivers(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all settlements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerFindAll(options) {
            return localVarFp.settlementsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Request settlement email
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerRequestEmail(body, options) {
            return localVarFp.settlementsControllerRequestEmail(body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SettlementsApiFactory = SettlementsApiFactory;
/**
 * SettlementsApi - object-oriented interface
 * @export
 * @class SettlementsApi
 * @extends {BaseAPI}
 */
class SettlementsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Calculate settlements for providers (TODO: Remove)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementsApi
     */
    settlementsControllerCalculateForDrivers(options) {
        return (0, exports.SettlementsApiFp)(this.configuration).settlementsControllerCalculateForDrivers(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all settlements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementsApi
     */
    settlementsControllerFindAll(options) {
        return (0, exports.SettlementsApiFp)(this.configuration).settlementsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Request settlement email
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementsApi
     */
    settlementsControllerRequestEmail(body, options) {
        return (0, exports.SettlementsApiFp)(this.configuration).settlementsControllerRequestEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SettlementsApi = SettlementsApi;
/**
 * TicketsApi - axios parameter creator
 * @export
 */
const TicketsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Assign a ticket to a crane
         * @param {string} ticketId
         * @param {string} craneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerAssign: (ticketId_1, craneId_1, ...args_1) => __awaiter(this, [ticketId_1, craneId_1, ...args_1], void 0, function* (ticketId, craneId, options = {}) {
            // verify required parameter 'ticketId' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerAssign', 'ticketId', ticketId);
            // verify required parameter 'craneId' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerAssign', 'craneId', craneId);
            const localVarPath = `/tickets/{ticketId}/assign/{craneId}`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)))
                .replace(`{${"craneId"}}`, encodeURIComponent(String(craneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create ticket
         * @param {CreateTicketDto} createTicketDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreate: (createTicketDto_1, ...args_1) => __awaiter(this, [createTicketDto_1, ...args_1], void 0, function* (createTicketDto, options = {}) {
            // verify required parameter 'createTicketDto' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerCreate', 'createTicketDto', createTicketDto);
            const localVarPath = `/tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createTicketDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create event from SIR
         * @param {SirEventDto} sirEventDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateEventFromSir: (sirEventDto_1, ...args_1) => __awaiter(this, [sirEventDto_1, ...args_1], void 0, function* (sirEventDto, options = {}) {
            // verify required parameter 'sirEventDto' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerCreateEventFromSir', 'sirEventDto', sirEventDto);
            const localVarPath = `/tickets/events/sir`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sirEventDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create a ticket comment
         * @param {CreateTicketCommentDto} createTicketCommentDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateTicketComment: (createTicketCommentDto_1, ...args_1) => __awaiter(this, [createTicketCommentDto_1, ...args_1], void 0, function* (createTicketCommentDto, options = {}) {
            // verify required parameter 'createTicketCommentDto' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerCreateTicketComment', 'createTicketCommentDto', createTicketCommentDto);
            const localVarPath = `/tickets/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createTicketCommentDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all tickets (beta)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindAllBeta: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/tickets/beta`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a ticket by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerFindOne', 'id', id);
            const localVarPath = `/tickets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Find tickets for board
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindTickets: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/tickets/board`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all tickets that belong to a driver
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindTicketsByDriverId: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/tickets/by-driver`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get arrival time for a crane to a ticket
         * @param {string} ticketId
         * @param {string} craneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerGetArrivalTimeCrane: (ticketId_1, craneId_1, ...args_1) => __awaiter(this, [ticketId_1, craneId_1, ...args_1], void 0, function* (ticketId, craneId, options = {}) {
            // verify required parameter 'ticketId' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerGetArrivalTimeCrane', 'ticketId', ticketId);
            // verify required parameter 'craneId' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerGetArrivalTimeCrane', 'craneId', craneId);
            const localVarPath = `/tickets/arrival-time/{ticketId}/{craneId}`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)))
                .replace(`{${"craneId"}}`, encodeURIComponent(String(craneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get nearby cranes for a ticket
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerGetNearbyCranes: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerGetNearbyCranes', 'id', id);
            const localVarPath = `/tickets/{id}/nearby-cranes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a ticket
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerRemove', 'id', id);
            const localVarPath = `/tickets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a ticket
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerUpdate: (id_1, body_1, ...args_1) => __awaiter(this, [id_1, body_1, ...args_1], void 0, function* (id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerUpdate', 'id', id);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerUpdate', 'body', body);
            const localVarPath = `/tickets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a ticket step
         * @param {number} id
         * @param {UpdateTicketStepDto} updateTicketStepDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerUpdateTicketStep: (id_1, updateTicketStepDto_1, ...args_1) => __awaiter(this, [id_1, updateTicketStepDto_1, ...args_1], void 0, function* (id, updateTicketStepDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerUpdateTicketStep', 'id', id);
            // verify required parameter 'updateTicketStepDto' is not null or undefined
            (0, common_1.assertParamExists)('ticketsControllerUpdateTicketStep', 'updateTicketStepDto', updateTicketStepDto);
            const localVarPath = `/tickets/step/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateTicketStepDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.TicketsApiAxiosParamCreator = TicketsApiAxiosParamCreator;
/**
 * TicketsApi - functional programming interface
 * @export
 */
const TicketsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TicketsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Assign a ticket to a crane
         * @param {string} ticketId
         * @param {string} craneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerAssign(ticketId, craneId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerAssign(ticketId, craneId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerAssign']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Create ticket
         * @param {CreateTicketDto} createTicketDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreate(createTicketDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerCreate(createTicketDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Create event from SIR
         * @param {SirEventDto} sirEventDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateEventFromSir(sirEventDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerCreateEventFromSir(sirEventDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerCreateEventFromSir']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Create a ticket comment
         * @param {CreateTicketCommentDto} createTicketCommentDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateTicketComment(createTicketCommentDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerCreateTicketComment(createTicketCommentDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerCreateTicketComment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all tickets (beta)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindAllBeta(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerFindAllBeta(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerFindAllBeta']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a ticket by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Find tickets for board
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindTickets(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerFindTickets(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerFindTickets']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all tickets that belong to a driver
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindTicketsByDriverId(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerFindTicketsByDriverId(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerFindTicketsByDriverId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get arrival time for a crane to a ticket
         * @param {string} ticketId
         * @param {string} craneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerGetArrivalTimeCrane(ticketId, craneId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerGetArrivalTimeCrane(ticketId, craneId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerGetArrivalTimeCrane']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get nearby cranes for a ticket
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerGetNearbyCranes(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerGetNearbyCranes(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerGetNearbyCranes']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a ticket
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a ticket
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerUpdate(id, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerUpdate(id, body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a ticket step
         * @param {number} id
         * @param {UpdateTicketStepDto} updateTicketStepDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerUpdateTicketStep(id, updateTicketStepDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ticketsControllerUpdateTicketStep(id, updateTicketStepDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TicketsApi.ticketsControllerUpdateTicketStep']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.TicketsApiFp = TicketsApiFp;
/**
 * TicketsApi - factory interface
 * @export
 */
const TicketsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TicketsApiFp)(configuration);
    return {
        /**
         *
         * @summary Assign a ticket to a crane
         * @param {string} ticketId
         * @param {string} craneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerAssign(ticketId, craneId, options) {
            return localVarFp.ticketsControllerAssign(ticketId, craneId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create ticket
         * @param {CreateTicketDto} createTicketDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreate(createTicketDto, options) {
            return localVarFp.ticketsControllerCreate(createTicketDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create event from SIR
         * @param {SirEventDto} sirEventDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateEventFromSir(sirEventDto, options) {
            return localVarFp.ticketsControllerCreateEventFromSir(sirEventDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a ticket comment
         * @param {CreateTicketCommentDto} createTicketCommentDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateTicketComment(createTicketCommentDto, options) {
            return localVarFp.ticketsControllerCreateTicketComment(createTicketCommentDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindAll(options) {
            return localVarFp.ticketsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all tickets (beta)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindAllBeta(options) {
            return localVarFp.ticketsControllerFindAllBeta(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a ticket by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindOne(id, options) {
            return localVarFp.ticketsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Find tickets for board
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindTickets(options) {
            return localVarFp.ticketsControllerFindTickets(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all tickets that belong to a driver
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindTicketsByDriverId(options) {
            return localVarFp.ticketsControllerFindTicketsByDriverId(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get arrival time for a crane to a ticket
         * @param {string} ticketId
         * @param {string} craneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerGetArrivalTimeCrane(ticketId, craneId, options) {
            return localVarFp.ticketsControllerGetArrivalTimeCrane(ticketId, craneId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get nearby cranes for a ticket
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerGetNearbyCranes(id, options) {
            return localVarFp.ticketsControllerGetNearbyCranes(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a ticket
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerRemove(id, options) {
            return localVarFp.ticketsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a ticket
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerUpdate(id, body, options) {
            return localVarFp.ticketsControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a ticket step
         * @param {number} id
         * @param {UpdateTicketStepDto} updateTicketStepDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerUpdateTicketStep(id, updateTicketStepDto, options) {
            return localVarFp.ticketsControllerUpdateTicketStep(id, updateTicketStepDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TicketsApiFactory = TicketsApiFactory;
/**
 * TicketsApi - object-oriented interface
 * @export
 * @class TicketsApi
 * @extends {BaseAPI}
 */
class TicketsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Assign a ticket to a crane
     * @param {string} ticketId
     * @param {string} craneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerAssign(ticketId, craneId, options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerAssign(ticketId, craneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create ticket
     * @param {CreateTicketDto} createTicketDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerCreate(createTicketDto, options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerCreate(createTicketDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create event from SIR
     * @param {SirEventDto} sirEventDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerCreateEventFromSir(sirEventDto, options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerCreateEventFromSir(sirEventDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a ticket comment
     * @param {CreateTicketCommentDto} createTicketCommentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerCreateTicketComment(createTicketCommentDto, options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerCreateTicketComment(createTicketCommentDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all tickets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerFindAll(options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all tickets (beta)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerFindAllBeta(options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerFindAllBeta(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a ticket by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerFindOne(id, options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Find tickets for board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerFindTickets(options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerFindTickets(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all tickets that belong to a driver
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerFindTicketsByDriverId(options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerFindTicketsByDriverId(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get arrival time for a crane to a ticket
     * @param {string} ticketId
     * @param {string} craneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerGetArrivalTimeCrane(ticketId, craneId, options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerGetArrivalTimeCrane(ticketId, craneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get nearby cranes for a ticket
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerGetNearbyCranes(id, options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerGetNearbyCranes(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a ticket
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerRemove(id, options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a ticket
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerUpdate(id, body, options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a ticket step
     * @param {number} id
     * @param {UpdateTicketStepDto} updateTicketStepDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerUpdateTicketStep(id, updateTicketStepDto, options) {
        return (0, exports.TicketsApiFp)(this.configuration).ticketsControllerUpdateTicketStep(id, updateTicketStepDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TicketsApi = TicketsApi;
/**
 * TractionTypesApi - axios parameter creator
 * @export
 */
const TractionTypesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary List all traction types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tractionTypesControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/traction-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a traction type by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tractionTypesControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('tractionTypesControllerFindOne', 'id', id);
            const localVarPath = `/traction-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.TractionTypesApiAxiosParamCreator = TractionTypesApiAxiosParamCreator;
/**
 * TractionTypesApi - functional programming interface
 * @export
 */
const TractionTypesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TractionTypesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary List all traction types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tractionTypesControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tractionTypesControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TractionTypesApi.tractionTypesControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a traction type by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tractionTypesControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tractionTypesControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TractionTypesApi.tractionTypesControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.TractionTypesApiFp = TractionTypesApiFp;
/**
 * TractionTypesApi - factory interface
 * @export
 */
const TractionTypesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TractionTypesApiFp)(configuration);
    return {
        /**
         *
         * @summary List all traction types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tractionTypesControllerFindAll(options) {
            return localVarFp.tractionTypesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a traction type by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tractionTypesControllerFindOne(id, options) {
            return localVarFp.tractionTypesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TractionTypesApiFactory = TractionTypesApiFactory;
/**
 * TractionTypesApi - object-oriented interface
 * @export
 * @class TractionTypesApi
 * @extends {BaseAPI}
 */
class TractionTypesApi extends base_1.BaseAPI {
    /**
     *
     * @summary List all traction types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TractionTypesApi
     */
    tractionTypesControllerFindAll(options) {
        return (0, exports.TractionTypesApiFp)(this.configuration).tractionTypesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a traction type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TractionTypesApi
     */
    tractionTypesControllerFindOne(id, options) {
        return (0, exports.TractionTypesApiFp)(this.configuration).tractionTypesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TractionTypesApi = TractionTypesApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
const UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create user
         * @param {CreateUserDto} createUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate: (createUserDto_1, ...args_1) => __awaiter(this, [createUserDto_1, ...args_1], void 0, function* (createUserDto, options = {}) {
            // verify required parameter 'createUserDto' is not null or undefined
            (0, common_1.assertParamExists)('usersControllerCreate', 'createUserDto', createUserDto);
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createUserDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a user by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('usersControllerFindOne', 'id', id);
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('usersControllerRemove', 'id', id);
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a user
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate: (id_1, body_1, ...args_1) => __awaiter(this, [id_1, body_1, ...args_1], void 0, function* (id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('usersControllerUpdate', 'id', id);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('usersControllerUpdate', 'body', body);
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator;
/**
 * UsersApi - functional programming interface
 * @export
 */
const UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.UsersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create user
         * @param {CreateUserDto} createUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(createUserDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersControllerCreate(createUserDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a user by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a user
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(id, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersControllerUpdate(id, body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.UsersApiFp = UsersApiFp;
/**
 * UsersApi - factory interface
 * @export
 */
const UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.UsersApiFp)(configuration);
    return {
        /**
         *
         * @summary Create user
         * @param {CreateUserDto} createUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(createUserDto, options) {
            return localVarFp.usersControllerCreate(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(options) {
            return localVarFp.usersControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a user by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(id, options) {
            return localVarFp.usersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id, options) {
            return localVarFp.usersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a user
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(id, body, options) {
            return localVarFp.usersControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.UsersApiFactory = UsersApiFactory;
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
class UsersApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create user
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerCreate(createUserDto, options) {
        return (0, exports.UsersApiFp)(this.configuration).usersControllerCreate(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerFindAll(options) {
        return (0, exports.UsersApiFp)(this.configuration).usersControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a user by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerFindOne(id, options) {
        return (0, exports.UsersApiFp)(this.configuration).usersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerRemove(id, options) {
        return (0, exports.UsersApiFp)(this.configuration).usersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a user
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerUpdate(id, body, options) {
        return (0, exports.UsersApiFp)(this.configuration).usersControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UsersApi = UsersApi;
/**
 * VehicleBrandModelsApi - axios parameter creator
 * @export
 */
const VehicleBrandModelsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create vehicle brand model
         * @param {CreateVehicleBrandModelDto} createVehicleBrandModelDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerCreate: (createVehicleBrandModelDto_1, ...args_1) => __awaiter(this, [createVehicleBrandModelDto_1, ...args_1], void 0, function* (createVehicleBrandModelDto, options = {}) {
            // verify required parameter 'createVehicleBrandModelDto' is not null or undefined
            (0, common_1.assertParamExists)('vehicleBrandModelsControllerCreate', 'createVehicleBrandModelDto', createVehicleBrandModelDto);
            const localVarPath = `/vehicle-brand-models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createVehicleBrandModelDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all vehicle brand models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/vehicle-brand-models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a vehicle brand model by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('vehicleBrandModelsControllerFindOne', 'id', id);
            const localVarPath = `/vehicle-brand-models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a vehicle brand model
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('vehicleBrandModelsControllerRemove', 'id', id);
            const localVarPath = `/vehicle-brand-models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a vehicle brand model
         * @param {string} id
         * @param {UpdateVehicleBrandModelDto} updateVehicleBrandModelDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerUpdate: (id_1, updateVehicleBrandModelDto_1, ...args_1) => __awaiter(this, [id_1, updateVehicleBrandModelDto_1, ...args_1], void 0, function* (id, updateVehicleBrandModelDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('vehicleBrandModelsControllerUpdate', 'id', id);
            // verify required parameter 'updateVehicleBrandModelDto' is not null or undefined
            (0, common_1.assertParamExists)('vehicleBrandModelsControllerUpdate', 'updateVehicleBrandModelDto', updateVehicleBrandModelDto);
            const localVarPath = `/vehicle-brand-models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateVehicleBrandModelDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.VehicleBrandModelsApiAxiosParamCreator = VehicleBrandModelsApiAxiosParamCreator;
/**
 * VehicleBrandModelsApi - functional programming interface
 * @export
 */
const VehicleBrandModelsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VehicleBrandModelsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create vehicle brand model
         * @param {CreateVehicleBrandModelDto} createVehicleBrandModelDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerCreate(createVehicleBrandModelDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleBrandModelsControllerCreate(createVehicleBrandModelDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleBrandModelsApi.vehicleBrandModelsControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all vehicle brand models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleBrandModelsControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleBrandModelsApi.vehicleBrandModelsControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a vehicle brand model by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleBrandModelsControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleBrandModelsApi.vehicleBrandModelsControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a vehicle brand model
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleBrandModelsControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleBrandModelsApi.vehicleBrandModelsControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a vehicle brand model
         * @param {string} id
         * @param {UpdateVehicleBrandModelDto} updateVehicleBrandModelDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerUpdate(id, updateVehicleBrandModelDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleBrandModelsControllerUpdate(id, updateVehicleBrandModelDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleBrandModelsApi.vehicleBrandModelsControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.VehicleBrandModelsApiFp = VehicleBrandModelsApiFp;
/**
 * VehicleBrandModelsApi - factory interface
 * @export
 */
const VehicleBrandModelsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VehicleBrandModelsApiFp)(configuration);
    return {
        /**
         *
         * @summary Create vehicle brand model
         * @param {CreateVehicleBrandModelDto} createVehicleBrandModelDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerCreate(createVehicleBrandModelDto, options) {
            return localVarFp.vehicleBrandModelsControllerCreate(createVehicleBrandModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all vehicle brand models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerFindAll(options) {
            return localVarFp.vehicleBrandModelsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a vehicle brand model by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerFindOne(id, options) {
            return localVarFp.vehicleBrandModelsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a vehicle brand model
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerRemove(id, options) {
            return localVarFp.vehicleBrandModelsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a vehicle brand model
         * @param {string} id
         * @param {UpdateVehicleBrandModelDto} updateVehicleBrandModelDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerUpdate(id, updateVehicleBrandModelDto, options) {
            return localVarFp.vehicleBrandModelsControllerUpdate(id, updateVehicleBrandModelDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VehicleBrandModelsApiFactory = VehicleBrandModelsApiFactory;
/**
 * VehicleBrandModelsApi - object-oriented interface
 * @export
 * @class VehicleBrandModelsApi
 * @extends {BaseAPI}
 */
class VehicleBrandModelsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create vehicle brand model
     * @param {CreateVehicleBrandModelDto} createVehicleBrandModelDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    vehicleBrandModelsControllerCreate(createVehicleBrandModelDto, options) {
        return (0, exports.VehicleBrandModelsApiFp)(this.configuration).vehicleBrandModelsControllerCreate(createVehicleBrandModelDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all vehicle brand models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    vehicleBrandModelsControllerFindAll(options) {
        return (0, exports.VehicleBrandModelsApiFp)(this.configuration).vehicleBrandModelsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a vehicle brand model by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    vehicleBrandModelsControllerFindOne(id, options) {
        return (0, exports.VehicleBrandModelsApiFp)(this.configuration).vehicleBrandModelsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a vehicle brand model
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    vehicleBrandModelsControllerRemove(id, options) {
        return (0, exports.VehicleBrandModelsApiFp)(this.configuration).vehicleBrandModelsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a vehicle brand model
     * @param {string} id
     * @param {UpdateVehicleBrandModelDto} updateVehicleBrandModelDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    vehicleBrandModelsControllerUpdate(id, updateVehicleBrandModelDto, options) {
        return (0, exports.VehicleBrandModelsApiFp)(this.configuration).vehicleBrandModelsControllerUpdate(id, updateVehicleBrandModelDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VehicleBrandModelsApi = VehicleBrandModelsApi;
/**
 * VehicleBrandsApi - axios parameter creator
 * @export
 */
const VehicleBrandsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create vehicle brand
         * @param {CreateVehicleBrandDto} createVehicleBrandDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerCreate: (createVehicleBrandDto_1, ...args_1) => __awaiter(this, [createVehicleBrandDto_1, ...args_1], void 0, function* (createVehicleBrandDto, options = {}) {
            // verify required parameter 'createVehicleBrandDto' is not null or undefined
            (0, common_1.assertParamExists)('vehicleBrandsControllerCreate', 'createVehicleBrandDto', createVehicleBrandDto);
            const localVarPath = `/vehicle-brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createVehicleBrandDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all vehicle brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/vehicle-brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a vehicle brand by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('vehicleBrandsControllerFindOne', 'id', id);
            const localVarPath = `/vehicle-brands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a vehicle brand
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('vehicleBrandsControllerRemove', 'id', id);
            const localVarPath = `/vehicle-brands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a vehicle brand
         * @param {string} id
         * @param {UpdateVehicleBrandDto} updateVehicleBrandDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerUpdate: (id_1, updateVehicleBrandDto_1, ...args_1) => __awaiter(this, [id_1, updateVehicleBrandDto_1, ...args_1], void 0, function* (id, updateVehicleBrandDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('vehicleBrandsControllerUpdate', 'id', id);
            // verify required parameter 'updateVehicleBrandDto' is not null or undefined
            (0, common_1.assertParamExists)('vehicleBrandsControllerUpdate', 'updateVehicleBrandDto', updateVehicleBrandDto);
            const localVarPath = `/vehicle-brands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateVehicleBrandDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.VehicleBrandsApiAxiosParamCreator = VehicleBrandsApiAxiosParamCreator;
/**
 * VehicleBrandsApi - functional programming interface
 * @export
 */
const VehicleBrandsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VehicleBrandsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create vehicle brand
         * @param {CreateVehicleBrandDto} createVehicleBrandDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerCreate(createVehicleBrandDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleBrandsControllerCreate(createVehicleBrandDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleBrandsApi.vehicleBrandsControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all vehicle brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleBrandsControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleBrandsApi.vehicleBrandsControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a vehicle brand by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleBrandsControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleBrandsApi.vehicleBrandsControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a vehicle brand
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleBrandsControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleBrandsApi.vehicleBrandsControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a vehicle brand
         * @param {string} id
         * @param {UpdateVehicleBrandDto} updateVehicleBrandDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerUpdate(id, updateVehicleBrandDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleBrandsControllerUpdate(id, updateVehicleBrandDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleBrandsApi.vehicleBrandsControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.VehicleBrandsApiFp = VehicleBrandsApiFp;
/**
 * VehicleBrandsApi - factory interface
 * @export
 */
const VehicleBrandsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VehicleBrandsApiFp)(configuration);
    return {
        /**
         *
         * @summary Create vehicle brand
         * @param {CreateVehicleBrandDto} createVehicleBrandDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerCreate(createVehicleBrandDto, options) {
            return localVarFp.vehicleBrandsControllerCreate(createVehicleBrandDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all vehicle brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerFindAll(options) {
            return localVarFp.vehicleBrandsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a vehicle brand by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerFindOne(id, options) {
            return localVarFp.vehicleBrandsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a vehicle brand
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerRemove(id, options) {
            return localVarFp.vehicleBrandsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a vehicle brand
         * @param {string} id
         * @param {UpdateVehicleBrandDto} updateVehicleBrandDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerUpdate(id, updateVehicleBrandDto, options) {
            return localVarFp.vehicleBrandsControllerUpdate(id, updateVehicleBrandDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VehicleBrandsApiFactory = VehicleBrandsApiFactory;
/**
 * VehicleBrandsApi - object-oriented interface
 * @export
 * @class VehicleBrandsApi
 * @extends {BaseAPI}
 */
class VehicleBrandsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create vehicle brand
     * @param {CreateVehicleBrandDto} createVehicleBrandDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    vehicleBrandsControllerCreate(createVehicleBrandDto, options) {
        return (0, exports.VehicleBrandsApiFp)(this.configuration).vehicleBrandsControllerCreate(createVehicleBrandDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all vehicle brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    vehicleBrandsControllerFindAll(options) {
        return (0, exports.VehicleBrandsApiFp)(this.configuration).vehicleBrandsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a vehicle brand by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    vehicleBrandsControllerFindOne(id, options) {
        return (0, exports.VehicleBrandsApiFp)(this.configuration).vehicleBrandsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a vehicle brand
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    vehicleBrandsControllerRemove(id, options) {
        return (0, exports.VehicleBrandsApiFp)(this.configuration).vehicleBrandsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a vehicle brand
     * @param {string} id
     * @param {UpdateVehicleBrandDto} updateVehicleBrandDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    vehicleBrandsControllerUpdate(id, updateVehicleBrandDto, options) {
        return (0, exports.VehicleBrandsApiFp)(this.configuration).vehicleBrandsControllerUpdate(id, updateVehicleBrandDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VehicleBrandsApi = VehicleBrandsApi;
/**
 * VehicleColorsApi - axios parameter creator
 * @export
 */
const VehicleColorsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create vehicle color
         * @param {CreateVehicleColorDto} createVehicleColorDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleColorsControllerCreate: (createVehicleColorDto_1, ...args_1) => __awaiter(this, [createVehicleColorDto_1, ...args_1], void 0, function* (createVehicleColorDto, options = {}) {
            // verify required parameter 'createVehicleColorDto' is not null or undefined
            (0, common_1.assertParamExists)('vehicleColorsControllerCreate', 'createVehicleColorDto', createVehicleColorDto);
            const localVarPath = `/vehicle-colors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createVehicleColorDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all vehicle colors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleColorsControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/vehicle-colors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.VehicleColorsApiAxiosParamCreator = VehicleColorsApiAxiosParamCreator;
/**
 * VehicleColorsApi - functional programming interface
 * @export
 */
const VehicleColorsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VehicleColorsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create vehicle color
         * @param {CreateVehicleColorDto} createVehicleColorDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleColorsControllerCreate(createVehicleColorDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleColorsControllerCreate(createVehicleColorDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleColorsApi.vehicleColorsControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all vehicle colors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleColorsControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleColorsControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleColorsApi.vehicleColorsControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.VehicleColorsApiFp = VehicleColorsApiFp;
/**
 * VehicleColorsApi - factory interface
 * @export
 */
const VehicleColorsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VehicleColorsApiFp)(configuration);
    return {
        /**
         *
         * @summary Create vehicle color
         * @param {CreateVehicleColorDto} createVehicleColorDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleColorsControllerCreate(createVehicleColorDto, options) {
            return localVarFp.vehicleColorsControllerCreate(createVehicleColorDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all vehicle colors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleColorsControllerFindAll(options) {
            return localVarFp.vehicleColorsControllerFindAll(options).then((request) => request(axios, basePath));
        },
    };
};
exports.VehicleColorsApiFactory = VehicleColorsApiFactory;
/**
 * VehicleColorsApi - object-oriented interface
 * @export
 * @class VehicleColorsApi
 * @extends {BaseAPI}
 */
class VehicleColorsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create vehicle color
     * @param {CreateVehicleColorDto} createVehicleColorDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleColorsApi
     */
    vehicleColorsControllerCreate(createVehicleColorDto, options) {
        return (0, exports.VehicleColorsApiFp)(this.configuration).vehicleColorsControllerCreate(createVehicleColorDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all vehicle colors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleColorsApi
     */
    vehicleColorsControllerFindAll(options) {
        return (0, exports.VehicleColorsApiFp)(this.configuration).vehicleColorsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VehicleColorsApi = VehicleColorsApi;
/**
 * VehicleTypesApi - axios parameter creator
 * @export
 */
const VehicleTypesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create vehicle type
         * @param {CreateVehicleTypeDto} createVehicleTypeDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerCreate: (createVehicleTypeDto_1, ...args_1) => __awaiter(this, [createVehicleTypeDto_1, ...args_1], void 0, function* (createVehicleTypeDto, options = {}) {
            // verify required parameter 'createVehicleTypeDto' is not null or undefined
            (0, common_1.assertParamExists)('vehicleTypesControllerCreate', 'createVehicleTypeDto', createVehicleTypeDto);
            const localVarPath = `/vehicle-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createVehicleTypeDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all vehicle types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/vehicle-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a vehicle type by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('vehicleTypesControllerFindOne', 'id', id);
            const localVarPath = `/vehicle-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a vehicle type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('vehicleTypesControllerRemove', 'id', id);
            const localVarPath = `/vehicle-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a vehicle type
         * @param {string} id
         * @param {UpdateVehicleTypeDto} updateVehicleTypeDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerUpdate: (id_1, updateVehicleTypeDto_1, ...args_1) => __awaiter(this, [id_1, updateVehicleTypeDto_1, ...args_1], void 0, function* (id, updateVehicleTypeDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('vehicleTypesControllerUpdate', 'id', id);
            // verify required parameter 'updateVehicleTypeDto' is not null or undefined
            (0, common_1.assertParamExists)('vehicleTypesControllerUpdate', 'updateVehicleTypeDto', updateVehicleTypeDto);
            const localVarPath = `/vehicle-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateVehicleTypeDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.VehicleTypesApiAxiosParamCreator = VehicleTypesApiAxiosParamCreator;
/**
 * VehicleTypesApi - functional programming interface
 * @export
 */
const VehicleTypesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VehicleTypesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create vehicle type
         * @param {CreateVehicleTypeDto} createVehicleTypeDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerCreate(createVehicleTypeDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleTypesControllerCreate(createVehicleTypeDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleTypesApi.vehicleTypesControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List all vehicle types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleTypesControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleTypesApi.vehicleTypesControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a vehicle type by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleTypesControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleTypesApi.vehicleTypesControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a vehicle type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleTypesControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleTypesApi.vehicleTypesControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a vehicle type
         * @param {string} id
         * @param {UpdateVehicleTypeDto} updateVehicleTypeDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerUpdate(id, updateVehicleTypeDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleTypesControllerUpdate(id, updateVehicleTypeDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleTypesApi.vehicleTypesControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.VehicleTypesApiFp = VehicleTypesApiFp;
/**
 * VehicleTypesApi - factory interface
 * @export
 */
const VehicleTypesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VehicleTypesApiFp)(configuration);
    return {
        /**
         *
         * @summary Create vehicle type
         * @param {CreateVehicleTypeDto} createVehicleTypeDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerCreate(createVehicleTypeDto, options) {
            return localVarFp.vehicleTypesControllerCreate(createVehicleTypeDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all vehicle types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerFindAll(options) {
            return localVarFp.vehicleTypesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a vehicle type by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerFindOne(id, options) {
            return localVarFp.vehicleTypesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a vehicle type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerRemove(id, options) {
            return localVarFp.vehicleTypesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a vehicle type
         * @param {string} id
         * @param {UpdateVehicleTypeDto} updateVehicleTypeDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerUpdate(id, updateVehicleTypeDto, options) {
            return localVarFp.vehicleTypesControllerUpdate(id, updateVehicleTypeDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VehicleTypesApiFactory = VehicleTypesApiFactory;
/**
 * VehicleTypesApi - object-oriented interface
 * @export
 * @class VehicleTypesApi
 * @extends {BaseAPI}
 */
class VehicleTypesApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create vehicle type
     * @param {CreateVehicleTypeDto} createVehicleTypeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    vehicleTypesControllerCreate(createVehicleTypeDto, options) {
        return (0, exports.VehicleTypesApiFp)(this.configuration).vehicleTypesControllerCreate(createVehicleTypeDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all vehicle types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    vehicleTypesControllerFindAll(options) {
        return (0, exports.VehicleTypesApiFp)(this.configuration).vehicleTypesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a vehicle type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    vehicleTypesControllerFindOne(id, options) {
        return (0, exports.VehicleTypesApiFp)(this.configuration).vehicleTypesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a vehicle type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    vehicleTypesControllerRemove(id, options) {
        return (0, exports.VehicleTypesApiFp)(this.configuration).vehicleTypesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a vehicle type
     * @param {string} id
     * @param {UpdateVehicleTypeDto} updateVehicleTypeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    vehicleTypesControllerUpdate(id, updateVehicleTypeDto, options) {
        return (0, exports.VehicleTypesApiFp)(this.configuration).vehicleTypesControllerUpdate(id, updateVehicleTypeDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VehicleTypesApi = VehicleTypesApi;
/**
 * VehicleWheelTypesApi - axios parameter creator
 * @export
 */
const VehicleWheelTypesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary List all vehicle wheel types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleWheelTypesControllerFindAll: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/vehicle-wheel-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a vehicle wheel type by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleWheelTypesControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('vehicleWheelTypesControllerFindOne', 'id', id);
            const localVarPath = `/vehicle-wheel-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.VehicleWheelTypesApiAxiosParamCreator = VehicleWheelTypesApiAxiosParamCreator;
/**
 * VehicleWheelTypesApi - functional programming interface
 * @export
 */
const VehicleWheelTypesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VehicleWheelTypesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary List all vehicle wheel types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleWheelTypesControllerFindAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleWheelTypesControllerFindAll(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleWheelTypesApi.vehicleWheelTypesControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a vehicle wheel type by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleWheelTypesControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.vehicleWheelTypesControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VehicleWheelTypesApi.vehicleWheelTypesControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.VehicleWheelTypesApiFp = VehicleWheelTypesApiFp;
/**
 * VehicleWheelTypesApi - factory interface
 * @export
 */
const VehicleWheelTypesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VehicleWheelTypesApiFp)(configuration);
    return {
        /**
         *
         * @summary List all vehicle wheel types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleWheelTypesControllerFindAll(options) {
            return localVarFp.vehicleWheelTypesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a vehicle wheel type by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleWheelTypesControllerFindOne(id, options) {
            return localVarFp.vehicleWheelTypesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VehicleWheelTypesApiFactory = VehicleWheelTypesApiFactory;
/**
 * VehicleWheelTypesApi - object-oriented interface
 * @export
 * @class VehicleWheelTypesApi
 * @extends {BaseAPI}
 */
class VehicleWheelTypesApi extends base_1.BaseAPI {
    /**
     *
     * @summary List all vehicle wheel types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleWheelTypesApi
     */
    vehicleWheelTypesControllerFindAll(options) {
        return (0, exports.VehicleWheelTypesApiFp)(this.configuration).vehicleWheelTypesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a vehicle wheel type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleWheelTypesApi
     */
    vehicleWheelTypesControllerFindOne(id, options) {
        return (0, exports.VehicleWheelTypesApiFp)(this.configuration).vehicleWheelTypesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VehicleWheelTypesApi = VehicleWheelTypesApi;
