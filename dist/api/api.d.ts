/**
 * Tracker API
 * Tracker API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AssignCraneDto
 */
export interface AssignCraneDto {
    /**
     *
     * @type {number}
     * @memberof AssignCraneDto
     */
    'userId': number;
    /**
     *
     * @type {number}
     * @memberof AssignCraneDto
     */
    'craneId': number;
    /**
     *
     * @type {number}
     * @memberof AssignCraneDto
     */
    'userActionId': number;
}
/**
 *
 * @export
 * @interface Base
 */
export interface Base {
    /**
     *
     * @type {number}
     * @memberof Base
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Base
     */
    'name': string;
    /**
     *
     * @type {object}
     * @memberof Base
     */
    'coordinates': object;
    /**
     *
     * @type {string}
     * @memberof Base
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Base
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Base
     */
    'deletedAt': string;
}
/**
 *
 * @export
 * @interface Client
 */
export interface Client {
    /**
     *
     * @type {number}
     * @memberof Client
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'deletedAt': string;
}
/**
 *
 * @export
 * @interface CoordinateDto
 */
export interface CoordinateDto {
    /**
     *
     * @type {string}
     * @memberof CoordinateDto
     */
    'type': string;
    /**
     *
     * @type {Array<string>}
     * @memberof CoordinateDto
     */
    'coordinates': Array<string>;
}
/**
 *
 * @export
 * @interface Crane
 */
export interface Crane {
    /**
     *
     * @type {number}
     * @memberof Crane
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Crane
     */
    'number': string;
    /**
     *
     * @type {string}
     * @memberof Crane
     */
    'domain': string;
    /**
     *
     * @type {string}
     * @memberof Crane
     */
    'year': string;
    /**
     *
     * @type {string}
     * @memberof Crane
     */
    'model': string;
    /**
     *
     * @type {number}
     * @memberof Crane
     */
    'typeId': number;
    /**
     *
     * @type {number}
     * @memberof Crane
     */
    'statusId': number;
    /**
     *
     * @type {number}
     * @memberof Crane
     */
    'baseId': number;
    /**
     *
     * @type {number}
     * @memberof Crane
     */
    'lastKnownLocationId': number;
    /**
     *
     * @type {string}
     * @memberof Crane
     */
    'lastKnownLocationCreatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Crane
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Crane
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Crane
     */
    'deletedAt': string;
}
/**
 *
 * @export
 * @interface CraneSummaryDto
 */
export interface CraneSummaryDto {
    /**
     *
     * @type {number}
     * @memberof CraneSummaryDto
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof CraneSummaryDto
     */
    'number': string;
    /**
     *
     * @type {number}
     * @memberof CraneSummaryDto
     */
    'trip_quantity': number;
    /**
     *
     * @type {number}
     * @memberof CraneSummaryDto
     */
    'cranes_status_id': number;
    /**
     *
     * @type {string}
     * @memberof CraneSummaryDto
     */
    'user': string;
}
/**
 *
 * @export
 * @interface CranesStatusDto
 */
export interface CranesStatusDto {
    /**
     *
     * @type {number}
     * @memberof CranesStatusDto
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof CranesStatusDto
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateBaseDto
 */
export interface CreateBaseDto {
    /**
     *
     * @type {string}
     * @memberof CreateBaseDto
     */
    'name': string;
    /**
     *
     * @type {CoordinateDto}
     * @memberof CreateBaseDto
     */
    'coordinates': CoordinateDto;
}
/**
 *
 * @export
 * @interface CreateClientDto
 */
export interface CreateClientDto {
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateCraneDto
 */
export interface CreateCraneDto {
    /**
     *
     * @type {string}
     * @memberof CreateCraneDto
     */
    'number': string;
    /**
     *
     * @type {string}
     * @memberof CreateCraneDto
     */
    'domain': string;
    /**
     *
     * @type {string}
     * @memberof CreateCraneDto
     */
    'year': string;
    /**
     *
     * @type {string}
     * @memberof CreateCraneDto
     */
    'model': string;
    /**
     *
     * @type {number}
     * @memberof CreateCraneDto
     */
    'typeId': number;
    /**
     *
     * @type {number}
     * @memberof CreateCraneDto
     */
    'statusId': number;
    /**
     *
     * @type {number}
     * @memberof CreateCraneDto
     */
    'baseId': number;
}
/**
 *
 * @export
 * @interface CreateInsurerDto
 */
export interface CreateInsurerDto {
    /**
     *
     * @type {string}
     * @memberof CreateInsurerDto
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof CreateInsurerDto
     */
    'clientId': number;
}
/**
 *
 * @export
 * @interface CreateLocationDto
 */
export interface CreateLocationDto {
    /**
     *
     * @type {CoordinateDto}
     * @memberof CreateLocationDto
     */
    'coordinates': CoordinateDto;
}
/**
 *
 * @export
 * @interface CreateRoleDto
 */
export interface CreateRoleDto {
    /**
     *
     * @type {string}
     * @memberof CreateRoleDto
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateSettingDto
 */
export interface CreateSettingDto {
    /**
     *
     * @type {string}
     * @memberof CreateSettingDto
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof CreateSettingDto
     */
    'value': string;
}
/**
 *
 * @export
 * @interface CreateTicketCommentDto
 */
export interface CreateTicketCommentDto {
    /**
     *
     * @type {number}
     * @memberof CreateTicketCommentDto
     */
    'ticketId': number;
    /**
     *
     * @type {string}
     * @memberof CreateTicketCommentDto
     */
    'comment': string;
}
/**
 *
 * @export
 * @interface CreateTicketDto
 */
export interface CreateTicketDto {
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'ticketStatusId': number;
    /**
     *
     * @type {object}
     * @memberof CreateTicketDto
     */
    'metadata': object;
    /**
     *
     * @type {object}
     * @memberof CreateTicketDto
     */
    'metadataJson': object;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'externalId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'ticketTypeId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'clientId': number;
    /**
     *
     * @type {string}
     * @memberof CreateTicketDto
     */
    'customer': string;
    /**
     *
     * @type {string}
     * @memberof CreateTicketDto
     */
    'phone': string;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'insurerId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleTypeId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleBrandId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleBrandModelId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleYear': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleColorId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleWheelTypeId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleGearBoxTypeId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleTractionTypeId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleHeight': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleWidth': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleLength': number;
    /**
     *
     * @type {string}
     * @memberof CreateTicketDto
     */
    'plate': string;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'passengers': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'delayValueId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'paymentTypeId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'paymentAmountDue': number;
    /**
     *
     * @type {boolean}
     * @memberof CreateTicketDto
     */
    'isScheduled': boolean;
    /**
     *
     * @type {string}
     * @memberof CreateTicketDto
     */
    'scheduledAt': string;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'originPlaceId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'destinationPlaceId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'distance': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'userId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'workingHours': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'waitingHours': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'returnToBaseDistance': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'extraction': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'movement': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'tolls': number;
    /**
     *
     * @type {boolean}
     * @memberof CreateTicketDto
     */
    'repaired': boolean;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'cancellationTypeId': number;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'cancelledTicketSettlementTypeId': number;
    /**
     *
     * @type {boolean}
     * @memberof CreateTicketDto
     */
    'containsErrors': boolean;
    /**
     *
     * @type {number}
     * @memberof CreateTicketDto
     */
    'originalTicketId': number;
    /**
     *
     * @type {string}
     * @memberof CreateTicketDto
     */
    'ordinalInDay': string;
}
/**
 *
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    'lastName': string;
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    'phone': string;
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    'password': string;
    /**
     *
     * @type {number}
     * @memberof CreateUserDto
     */
    'roleId': number;
}
/**
 *
 * @export
 * @interface CreateVehicleBrandDto
 */
export interface CreateVehicleBrandDto {
    /**
     *
     * @type {string}
     * @memberof CreateVehicleBrandDto
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateVehicleBrandModelDto
 */
export interface CreateVehicleBrandModelDto {
    /**
     *
     * @type {string}
     * @memberof CreateVehicleBrandModelDto
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof CreateVehicleBrandModelDto
     */
    'vehicleBrandId': number;
}
/**
 *
 * @export
 * @interface CreateVehicleColorDto
 */
export interface CreateVehicleColorDto {
    /**
     *
     * @type {string}
     * @memberof CreateVehicleColorDto
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateVehicleTypeDto
 */
export interface CreateVehicleTypeDto {
    /**
     *
     * @type {string}
     * @memberof CreateVehicleTypeDto
     */
    'name': string;
}
/**
 *
 * @export
 * @interface DelayValue
 */
export interface DelayValue {
    /**
     *
     * @type {number}
     * @memberof DelayValue
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof DelayValue
     */
    'value': number;
}
/**
 *
 * @export
 * @interface GearBoxType
 */
export interface GearBoxType {
    /**
     *
     * @type {number}
     * @memberof GearBoxType
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof GearBoxType
     */
    'name': string;
}
/**
 *
 * @export
 * @interface Insurer
 */
export interface Insurer {
    /**
     *
     * @type {number}
     * @memberof Insurer
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Insurer
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof Insurer
     */
    'clientId': number;
}
/**
 *
 * @export
 * @interface Location
 */
export interface Location {
    /**
     *
     * @type {number}
     * @memberof Location
     */
    'id': number;
    /**
     *
     * @type {object}
     * @memberof Location
     */
    'coordinates': object;
    /**
     *
     * @type {string}
     * @memberof Location
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Location
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     *
     * @type {string}
     * @memberof LoginDto
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof LoginDto
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof LoginDto
     */
    'scope'?: string;
}
/**
 *
 * @export
 * @interface LogoutDto
 */
export interface LogoutDto {
    /**
     *
     * @type {string}
     * @memberof LogoutDto
     */
    'scope'?: string;
}
/**
 *
 * @export
 * @interface PaymentType
 */
export interface PaymentType {
    /**
     *
     * @type {number}
     * @memberof PaymentType
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof PaymentType
     */
    'name': string;
}
/**
 *
 * @export
 * @interface Report
 */
export interface Report {
    /**
     *
     * @type {number}
     * @memberof Report
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Report
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Report
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Report
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface Role
 */
export interface Role {
    /**
     *
     * @type {number}
     * @memberof Role
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Role
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Role
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Role
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Role
     */
    'deletedAt': string;
}
/**
 *
 * @export
 * @interface Setting
 */
export interface Setting {
    /**
     *
     * @type {number}
     * @memberof Setting
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Setting
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Setting
     */
    'value': string;
    /**
     *
     * @type {string}
     * @memberof Setting
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Setting
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Setting
     */
    'deletedAt': string;
}
/**
 *
 * @export
 * @interface Settlement
 */
export interface Settlement {
    /**
     *
     * @type {number}
     * @memberof Settlement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof Settlement
     */
    'ticketId': number;
    /**
     *
     * @type {number}
     * @memberof Settlement
     */
    'fareScopeId': number;
    /**
     *
     * @type {number}
     * @memberof Settlement
     */
    'total': number;
    /**
     *
     * @type {number}
     * @memberof Settlement
     */
    'period': number;
    /**
     *
     * @type {string}
     * @memberof Settlement
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Settlement
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface SirEventDto
 */
export interface SirEventDto {
    /**
     *
     * @type {number}
     * @memberof SirEventDto
     */
    'sirId': number;
    /**
     *
     * @type {string}
     * @memberof SirEventDto
     */
    'eventType': SirEventDtoEventTypeEnum;
}
export declare const SirEventDtoEventTypeEnum: {
    readonly Created: "CREATED";
    readonly Updated: "UPDATED";
    readonly Deleted: "DELETED";
};
export type SirEventDtoEventTypeEnum = typeof SirEventDtoEventTypeEnum[keyof typeof SirEventDtoEventTypeEnum];
/**
 *
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'ticketStatusId': number;
    /**
     *
     * @type {TicketStatus}
     * @memberof Ticket
     */
    'ticketStatus': TicketStatus;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'externalId': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'ticketTypeId': number;
    /**
     *
     * @type {TicketType}
     * @memberof Ticket
     */
    'ticketType': TicketType;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'clientId': number;
    /**
     *
     * @type {Client}
     * @memberof Ticket
     */
    'client': Client;
    /**
     *
     * @type {string}
     * @memberof Ticket
     */
    'customer': string;
    /**
     *
     * @type {string}
     * @memberof Ticket
     */
    'phone': string;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'insurerId': number;
    /**
     *
     * @type {Insurer}
     * @memberof Ticket
     */
    'insurer': Insurer;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'vehicleTypeId': number;
    /**
     *
     * @type {VehicleType}
     * @memberof Ticket
     */
    'vehicleType': VehicleType;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'vehicleBrandId': number;
    /**
     *
     * @type {VehicleBrand}
     * @memberof Ticket
     */
    'vehicleBrand': VehicleBrand;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'vehicleBrandModelId': number;
    /**
     *
     * @type {VehicleBrandModel}
     * @memberof Ticket
     */
    'vehicleBrandModel': VehicleBrandModel;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'vehicleYear': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'vehicleColorId': number;
    /**
     *
     * @type {VehicleColor}
     * @memberof Ticket
     */
    'vehicleColor': VehicleColor;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'vehicleWheelTypeId': number;
    /**
     *
     * @type {VehicleWheelType}
     * @memberof Ticket
     */
    'vehicleWheelType': VehicleWheelType;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'vehicleGearBoxTypeId': number;
    /**
     *
     * @type {GearBoxType}
     * @memberof Ticket
     */
    'vehicleGearBoxType': GearBoxType;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'vehicleTractionTypeId': number;
    /**
     *
     * @type {TractionType}
     * @memberof Ticket
     */
    'vehicleTractionType': TractionType;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'vehicleHeight': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'vehicleWidth': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'vehicleLength': number;
    /**
     *
     * @type {string}
     * @memberof Ticket
     */
    'plate': string;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'passengers': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'delayValueId': number;
    /**
     *
     * @type {DelayValue}
     * @memberof Ticket
     */
    'delayValue': DelayValue;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'paymentTypeId': number;
    /**
     *
     * @type {PaymentType}
     * @memberof Ticket
     */
    'paymentType': PaymentType;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'paymentAmountDue': number;
    /**
     *
     * @type {boolean}
     * @memberof Ticket
     */
    'isScheduled': boolean;
    /**
     *
     * @type {string}
     * @memberof Ticket
     */
    'scheduledAt': string;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'originPlaceId': number;
    /**
     *
     * @type {object}
     * @memberof Ticket
     */
    'originPlace': object;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'destinationPlaceId': number;
    /**
     *
     * @type {object}
     * @memberof Ticket
     */
    'destinationPlace': object;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'distance': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'userId': number;
    /**
     *
     * @type {User}
     * @memberof Ticket
     */
    'user': User;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'workingHours': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'waitingHours': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'returnToBaseDistance': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'extraction': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'movement': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'tolls': number;
    /**
     *
     * @type {boolean}
     * @memberof Ticket
     */
    'repaired': boolean;
    /**
     *
     * @type {string}
     * @memberof Ticket
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Ticket
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Ticket
     */
    'deletedAt': string;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'cancellationTypeId': number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'cancelledTicketSettlementTypeId': number;
    /**
     *
     * @type {boolean}
     * @memberof Ticket
     */
    'containsErrors': boolean;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    'originalTicketId': number;
    /**
     *
     * @type {string}
     * @memberof Ticket
     */
    'ordinalInDay': string;
    /**
     *
     * @type {Array<string>}
     * @memberof Ticket
     */
    'vehicleIssues': Array<string>;
}
/**
 *
 * @export
 * @interface TicketStatus
 */
export interface TicketStatus {
    /**
     *
     * @type {number}
     * @memberof TicketStatus
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof TicketStatus
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof TicketStatus
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof TicketStatus
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface TicketType
 */
export interface TicketType {
    /**
     *
     * @type {number}
     * @memberof TicketType
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof TicketType
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof TicketType
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof TicketType
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface TractionType
 */
export interface TractionType {
    /**
     *
     * @type {number}
     * @memberof TractionType
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof TractionType
     */
    'name': string;
}
/**
 *
 * @export
 * @interface TripsPerDayDto
 */
export interface TripsPerDayDto {
    /**
     *
     * @type {string}
     * @memberof TripsPerDayDto
     */
    'statusId': string;
    /**
     *
     * @type {string}
     * @memberof TripsPerDayDto
     */
    'dateFrom': string;
    /**
     *
     * @type {string}
     * @memberof TripsPerDayDto
     */
    'dateTo': string;
}
/**
 *
 * @export
 * @interface TripsStatusChangesDto
 */
export interface TripsStatusChangesDto {
    /**
     *
     * @type {string}
     * @memberof TripsStatusChangesDto
     */
    'dateFrom': string;
    /**
     *
     * @type {string}
     * @memberof TripsStatusChangesDto
     */
    'dateTo': string;
}
/**
 *
 * @export
 * @interface UnassignCraneDto
 */
export interface UnassignCraneDto {
    /**
     *
     * @type {number}
     * @memberof UnassignCraneDto
     */
    'userId': number;
    /**
     *
     * @type {number}
     * @memberof UnassignCraneDto
     */
    'userActionId': number;
}
/**
 *
 * @export
 * @interface UpdateInsurerDto
 */
export interface UpdateInsurerDto {
    /**
     *
     * @type {string}
     * @memberof UpdateInsurerDto
     */
    'name'?: string;
    /**
     *
     * @type {number}
     * @memberof UpdateInsurerDto
     */
    'clientId'?: number;
}
/**
 *
 * @export
 * @interface UpdateTicketStepDto
 */
export interface UpdateTicketStepDto {
    /**
     *
     * @type {number}
     * @memberof UpdateTicketStepDto
     */
    'km': number;
}
/**
 *
 * @export
 * @interface UpdateVehicleBrandDto
 */
export interface UpdateVehicleBrandDto {
    /**
     *
     * @type {string}
     * @memberof UpdateVehicleBrandDto
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface UpdateVehicleBrandModelDto
 */
export interface UpdateVehicleBrandModelDto {
    /**
     *
     * @type {string}
     * @memberof UpdateVehicleBrandModelDto
     */
    'name'?: string;
    /**
     *
     * @type {number}
     * @memberof UpdateVehicleBrandModelDto
     */
    'vehicleBrandId'?: number;
}
/**
 *
 * @export
 * @interface UpdateVehicleTypeDto
 */
export interface UpdateVehicleTypeDto {
    /**
     *
     * @type {string}
     * @memberof UpdateVehicleTypeDto
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'lastName': string;
    /**
     *
     * @type {number}
     * @memberof User
     */
    'roleId': number;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'phone': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'deletedAt': string;
}
/**
 *
 * @export
 * @interface VehicleBrand
 */
export interface VehicleBrand {
    /**
     *
     * @type {number}
     * @memberof VehicleBrand
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof VehicleBrand
     */
    'name': string;
}
/**
 *
 * @export
 * @interface VehicleBrandModel
 */
export interface VehicleBrandModel {
    /**
     *
     * @type {number}
     * @memberof VehicleBrandModel
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof VehicleBrandModel
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof VehicleBrandModel
     */
    'vehicleBrandId': number;
}
/**
 *
 * @export
 * @interface VehicleColor
 */
export interface VehicleColor {
    /**
     *
     * @type {number}
     * @memberof VehicleColor
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof VehicleColor
     */
    'name': string;
}
/**
 *
 * @export
 * @interface VehicleType
 */
export interface VehicleType {
    /**
     *
     * @type {number}
     * @memberof VehicleType
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof VehicleType
     */
    'name': string;
}
/**
 *
 * @export
 * @interface VehicleWheelType
 */
export interface VehicleWheelType {
    /**
     *
     * @type {number}
     * @memberof VehicleWheelType
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof VehicleWheelType
     */
    'name': string;
}
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export declare const AnalyticsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get estimated trips
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetEstimatedTrips: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get total active cranes by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalActiveCranesByStatus: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get total distance per day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalDistancePerDay: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get total trips for current day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsForCurrentDay: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get total trips for current month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsForCurrentMonth: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get total trips per insurance company per month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get total trips per location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsPerLocation: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get total trips per type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsPerType: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get total trips per vehicle type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsPerVehicleType: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export declare const AnalyticsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get estimated trips
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetEstimatedTrips(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get total active cranes by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalActiveCranesByStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get total distance per day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalDistancePerDay(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get total trips for current day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsForCurrentDay(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get total trips for current month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsForCurrentMonth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get total trips per insurance company per month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get total trips per location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsPerLocation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get total trips per type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsPerType(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get total trips per vehicle type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsPerVehicleType(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AnalyticsApi - factory interface
 * @export
 */
export declare const AnalyticsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get estimated trips
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetEstimatedTrips(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get total active cranes by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalActiveCranesByStatus(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get total distance per day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalDistancePerDay(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get total trips for current day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsForCurrentDay(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get total trips for current month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsForCurrentMonth(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get total trips per insurance company per month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get total trips per location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsPerLocation(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get total trips per type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsPerType(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get total trips per vehicle type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetTotalTripsPerVehicleType(options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export declare class AnalyticsApi extends BaseAPI {
    /**
     *
     * @summary Get estimated trips
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetEstimatedTrips(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get total active cranes by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalActiveCranesByStatus(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get total distance per day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalDistancePerDay(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get total trips for current day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalTripsForCurrentDay(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get total trips for current month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalTripsForCurrentMonth(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get total trips per insurance company per month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get total trips per location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalTripsPerLocation(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get total trips per type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalTripsPerType(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get total trips per vehicle type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetTotalTripsPerVehicleType(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get current user status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetStatus: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary User login
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogin: (loginDto: LoginDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary User logout
     * @param {LogoutDto} logoutDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogout: (logoutDto: LogoutDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefresh: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get current user status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary User login
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary User logout
     * @param {LogoutDto} logoutDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogout(logoutDto: LogoutDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefresh(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get current user status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetStatus(options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @summary User login
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @summary User logout
     * @param {LogoutDto} logoutDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogout(logoutDto: LogoutDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefresh(options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @summary Get current user status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerGetStatus(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @summary User login
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @summary User logout
     * @param {LogoutDto} logoutDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLogout(logoutDto: LogoutDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerRefresh(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * BasesApi - axios parameter creator
 * @export
 */
export declare const BasesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create base
     * @param {CreateBaseDto} createBaseDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerCreate: (createBaseDto: CreateBaseDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all bases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a base by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a base
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a base
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerUpdate: (id: string, body: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BasesApi - functional programming interface
 * @export
 */
export declare const BasesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create base
     * @param {CreateBaseDto} createBaseDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerCreate(createBaseDto: CreateBaseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Base>>;
    /**
     *
     * @summary List all bases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Base>>>;
    /**
     *
     * @summary Get a base by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Base>>;
    /**
     *
     * @summary Delete a base
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a base
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Base>>;
};
/**
 * BasesApi - factory interface
 * @export
 */
export declare const BasesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create base
     * @param {CreateBaseDto} createBaseDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerCreate(createBaseDto: CreateBaseDto, options?: RawAxiosRequestConfig): AxiosPromise<Base>;
    /**
     *
     * @summary List all bases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Base>>;
    /**
     *
     * @summary Get a base by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Base>;
    /**
     *
     * @summary Delete a base
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update a base
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    basesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Base>;
};
/**
 * BasesApi - object-oriented interface
 * @export
 * @class BasesApi
 * @extends {BaseAPI}
 */
export declare class BasesApi extends BaseAPI {
    /**
     *
     * @summary Create base
     * @param {CreateBaseDto} createBaseDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    basesControllerCreate(createBaseDto: CreateBaseDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Base, any>>;
    /**
     *
     * @summary List all bases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    basesControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Base[], any>>;
    /**
     *
     * @summary Get a base by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    basesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Base, any>>;
    /**
     *
     * @summary Delete a base
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    basesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a base
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    basesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Base, any>>;
}
/**
 * ClientsApi - axios parameter creator
 * @export
 */
export declare const ClientsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create client
     * @param {CreateClientDto} createClientDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerCreate: (createClientDto: CreateClientDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a client by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a client
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerUpdate: (id: string, body: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ClientsApi - functional programming interface
 * @export
 */
export declare const ClientsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create client
     * @param {CreateClientDto} createClientDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerCreate(createClientDto: CreateClientDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>>;
    /**
     *
     * @summary List all clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Client>>>;
    /**
     *
     * @summary Get a client by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>>;
    /**
     *
     * @summary Delete a client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a client
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>>;
};
/**
 * ClientsApi - factory interface
 * @export
 */
export declare const ClientsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create client
     * @param {CreateClientDto} createClientDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerCreate(createClientDto: CreateClientDto, options?: RawAxiosRequestConfig): AxiosPromise<Client>;
    /**
     *
     * @summary List all clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Client>>;
    /**
     *
     * @summary Get a client by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Client>;
    /**
     *
     * @summary Delete a client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update a client
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Client>;
};
/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export declare class ClientsApi extends BaseAPI {
    /**
     *
     * @summary Create client
     * @param {CreateClientDto} createClientDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    clientsControllerCreate(createClientDto: CreateClientDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Client, any>>;
    /**
     *
     * @summary List all clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    clientsControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Client[], any>>;
    /**
     *
     * @summary Get a client by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    clientsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Client, any>>;
    /**
     *
     * @summary Delete a client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    clientsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a client
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    clientsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Client, any>>;
}
/**
 * CranesApi - axios parameter creator
 * @export
 */
export declare const CranesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Assign a crane to a user
     * @param {AssignCraneDto} assignCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerAssign: (assignCraneDto: AssignCraneDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create crane
     * @param {CreateCraneDto} createCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerCreate: (createCraneDto: CreateCraneDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Calculate distance to a point
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerDistanceToPoint: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Calculate distance to a point using an external API
     * @param {number} craneId
     * @param {number} lat
     * @param {number} lng
     * @param {number} currentTicketId
     * @param {number} ticketTypeid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerDistanceToPointApi: (craneId: number, lat: number, lng: number, currentTicketId: number, ticketTypeid: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Calculate distance to a point for a specific crane
     * @param {string} id
     * @param {string} lat
     * @param {string} lng
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerDistanceToPointByCrane: (id: string, lat: string, lng: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all cranes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a crane by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all crane locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerGetAllCranesLocations: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the assignment history of a crane
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerGetCraneHistory: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get cranes with finished drives
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerGetCranesDriveFinished: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the status of all cranes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerGetCranesStatus: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a crane
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Unassign a crane from a user
     * @param {UnassignCraneDto} unassignCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerUnassign: (unassignCraneDto: UnassignCraneDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a crane
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerUpdate: (id: string, body: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CranesApi - functional programming interface
 * @export
 */
export declare const CranesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Assign a crane to a user
     * @param {AssignCraneDto} assignCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerAssign(assignCraneDto: AssignCraneDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Create crane
     * @param {CreateCraneDto} createCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerCreate(createCraneDto: CreateCraneDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Crane>>;
    /**
     *
     * @summary Calculate distance to a point
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerDistanceToPoint(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Calculate distance to a point using an external API
     * @param {number} craneId
     * @param {number} lat
     * @param {number} lng
     * @param {number} currentTicketId
     * @param {number} ticketTypeid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerDistanceToPointApi(craneId: number, lat: number, lng: number, currentTicketId: number, ticketTypeid: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Calculate distance to a point for a specific crane
     * @param {string} id
     * @param {string} lat
     * @param {string} lng
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerDistanceToPointByCrane(id: string, lat: string, lng: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary List all cranes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Crane>>>;
    /**
     *
     * @summary Get a crane by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Crane>>;
    /**
     *
     * @summary Get all crane locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerGetAllCranesLocations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get the assignment history of a crane
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerGetCraneHistory(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get cranes with finished drives
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerGetCranesDriveFinished(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CraneSummaryDto>>>;
    /**
     *
     * @summary Get the status of all cranes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerGetCranesStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CranesStatusDto>>>;
    /**
     *
     * @summary Delete a crane
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Unassign a crane from a user
     * @param {UnassignCraneDto} unassignCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerUnassign(unassignCraneDto: UnassignCraneDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a crane
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Crane>>;
};
/**
 * CranesApi - factory interface
 * @export
 */
export declare const CranesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Assign a crane to a user
     * @param {AssignCraneDto} assignCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerAssign(assignCraneDto: AssignCraneDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Create crane
     * @param {CreateCraneDto} createCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerCreate(createCraneDto: CreateCraneDto, options?: RawAxiosRequestConfig): AxiosPromise<Crane>;
    /**
     *
     * @summary Calculate distance to a point
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerDistanceToPoint(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Calculate distance to a point using an external API
     * @param {number} craneId
     * @param {number} lat
     * @param {number} lng
     * @param {number} currentTicketId
     * @param {number} ticketTypeid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerDistanceToPointApi(craneId: number, lat: number, lng: number, currentTicketId: number, ticketTypeid: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Calculate distance to a point for a specific crane
     * @param {string} id
     * @param {string} lat
     * @param {string} lng
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerDistanceToPointByCrane(id: string, lat: string, lng: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List all cranes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Crane>>;
    /**
     *
     * @summary Get a crane by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Crane>;
    /**
     *
     * @summary Get all crane locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerGetAllCranesLocations(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get the assignment history of a crane
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerGetCraneHistory(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get cranes with finished drives
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerGetCranesDriveFinished(options?: RawAxiosRequestConfig): AxiosPromise<Array<CraneSummaryDto>>;
    /**
     *
     * @summary Get the status of all cranes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerGetCranesStatus(options?: RawAxiosRequestConfig): AxiosPromise<Array<CranesStatusDto>>;
    /**
     *
     * @summary Delete a crane
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Unassign a crane from a user
     * @param {UnassignCraneDto} unassignCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerUnassign(unassignCraneDto: UnassignCraneDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update a crane
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cranesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Crane>;
};
/**
 * CranesApi - object-oriented interface
 * @export
 * @class CranesApi
 * @extends {BaseAPI}
 */
export declare class CranesApi extends BaseAPI {
    /**
     *
     * @summary Assign a crane to a user
     * @param {AssignCraneDto} assignCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerAssign(assignCraneDto: AssignCraneDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Create crane
     * @param {CreateCraneDto} createCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerCreate(createCraneDto: CreateCraneDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Crane, any>>;
    /**
     *
     * @summary Calculate distance to a point
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerDistanceToPoint(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Calculate distance to a point using an external API
     * @param {number} craneId
     * @param {number} lat
     * @param {number} lng
     * @param {number} currentTicketId
     * @param {number} ticketTypeid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerDistanceToPointApi(craneId: number, lat: number, lng: number, currentTicketId: number, ticketTypeid: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Calculate distance to a point for a specific crane
     * @param {string} id
     * @param {string} lat
     * @param {string} lng
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerDistanceToPointByCrane(id: string, lat: string, lng: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary List all cranes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Crane[], any>>;
    /**
     *
     * @summary Get a crane by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Crane, any>>;
    /**
     *
     * @summary Get all crane locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerGetAllCranesLocations(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get the assignment history of a crane
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerGetCraneHistory(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get cranes with finished drives
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerGetCranesDriveFinished(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CraneSummaryDto[], any>>;
    /**
     *
     * @summary Get the status of all cranes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerGetCranesStatus(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CranesStatusDto[], any>>;
    /**
     *
     * @summary Delete a crane
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Unassign a crane from a user
     * @param {UnassignCraneDto} unassignCraneDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerUnassign(unassignCraneDto: UnassignCraneDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a crane
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    cranesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Crane, any>>;
}
/**
 * DelaysApi - axios parameter creator
 * @export
 */
export declare const DelaysApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary List all delay values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delaysControllerFindAllDelayValues: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a delay value by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delaysControllerFindOneDelayValue: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DelaysApi - functional programming interface
 * @export
 */
export declare const DelaysApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary List all delay values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delaysControllerFindAllDelayValues(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DelayValue>>>;
    /**
     *
     * @summary Get a delay value by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delaysControllerFindOneDelayValue(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelayValue>>;
};
/**
 * DelaysApi - factory interface
 * @export
 */
export declare const DelaysApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary List all delay values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delaysControllerFindAllDelayValues(options?: RawAxiosRequestConfig): AxiosPromise<Array<DelayValue>>;
    /**
     *
     * @summary Get a delay value by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delaysControllerFindOneDelayValue(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DelayValue>;
};
/**
 * DelaysApi - object-oriented interface
 * @export
 * @class DelaysApi
 * @extends {BaseAPI}
 */
export declare class DelaysApi extends BaseAPI {
    /**
     *
     * @summary List all delay values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelaysApi
     */
    delaysControllerFindAllDelayValues(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DelayValue[], any>>;
    /**
     *
     * @summary Get a delay value by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelaysApi
     */
    delaysControllerFindOneDelayValue(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DelayValue, any>>;
}
/**
 * FaresApi - axios parameter creator
 * @export
 */
export declare const FaresApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerCreate: (body: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerUpdate: (id: string, body: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FaresApi - functional programming interface
 * @export
 */
export declare const FaresApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerCreate(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * FaresApi - factory interface
 * @export
 */
export declare const FaresApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerCreate(body: object, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faresControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * FaresApi - object-oriented interface
 * @export
 * @class FaresApi
 * @extends {BaseAPI}
 */
export declare class FaresApi extends BaseAPI {
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    faresControllerCreate(body: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    faresControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    faresControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    faresControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    faresControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * GearBoxTypesApi - axios parameter creator
 * @export
 */
export declare const GearBoxTypesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary List all gear box types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gearBoxTypesControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a gear box type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gearBoxTypesControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GearBoxTypesApi - functional programming interface
 * @export
 */
export declare const GearBoxTypesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary List all gear box types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gearBoxTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GearBoxType>>>;
    /**
     *
     * @summary Get a gear box type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gearBoxTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GearBoxType>>;
};
/**
 * GearBoxTypesApi - factory interface
 * @export
 */
export declare const GearBoxTypesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary List all gear box types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gearBoxTypesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<GearBoxType>>;
    /**
     *
     * @summary Get a gear box type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gearBoxTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GearBoxType>;
};
/**
 * GearBoxTypesApi - object-oriented interface
 * @export
 * @class GearBoxTypesApi
 * @extends {BaseAPI}
 */
export declare class GearBoxTypesApi extends BaseAPI {
    /**
     *
     * @summary List all gear box types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GearBoxTypesApi
     */
    gearBoxTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GearBoxType[], any>>;
    /**
     *
     * @summary Get a gear box type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GearBoxTypesApi
     */
    gearBoxTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GearBoxType, any>>;
}
/**
 * InsurersApi - axios parameter creator
 * @export
 */
export declare const InsurersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create insurer
     * @param {CreateInsurerDto} createInsurerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerCreate: (createInsurerDto: CreateInsurerDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all insurers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get an insurer by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete an insurer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update an insurer
     * @param {string} id
     * @param {UpdateInsurerDto} updateInsurerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerUpdate: (id: string, updateInsurerDto: UpdateInsurerDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InsurersApi - functional programming interface
 * @export
 */
export declare const InsurersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create insurer
     * @param {CreateInsurerDto} createInsurerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerCreate(createInsurerDto: CreateInsurerDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Insurer>>;
    /**
     *
     * @summary List all insurers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Insurer>>>;
    /**
     *
     * @summary Get an insurer by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Insurer>>;
    /**
     *
     * @summary Delete an insurer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update an insurer
     * @param {string} id
     * @param {UpdateInsurerDto} updateInsurerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerUpdate(id: string, updateInsurerDto: UpdateInsurerDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Insurer>>;
};
/**
 * InsurersApi - factory interface
 * @export
 */
export declare const InsurersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create insurer
     * @param {CreateInsurerDto} createInsurerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerCreate(createInsurerDto: CreateInsurerDto, options?: RawAxiosRequestConfig): AxiosPromise<Insurer>;
    /**
     *
     * @summary List all insurers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Insurer>>;
    /**
     *
     * @summary Get an insurer by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Insurer>;
    /**
     *
     * @summary Delete an insurer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update an insurer
     * @param {string} id
     * @param {UpdateInsurerDto} updateInsurerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insurersControllerUpdate(id: string, updateInsurerDto: UpdateInsurerDto, options?: RawAxiosRequestConfig): AxiosPromise<Insurer>;
};
/**
 * InsurersApi - object-oriented interface
 * @export
 * @class InsurersApi
 * @extends {BaseAPI}
 */
export declare class InsurersApi extends BaseAPI {
    /**
     *
     * @summary Create insurer
     * @param {CreateInsurerDto} createInsurerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    insurersControllerCreate(createInsurerDto: CreateInsurerDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Insurer, any>>;
    /**
     *
     * @summary List all insurers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    insurersControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Insurer[], any>>;
    /**
     *
     * @summary Get an insurer by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    insurersControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Insurer, any>>;
    /**
     *
     * @summary Delete an insurer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    insurersControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update an insurer
     * @param {string} id
     * @param {UpdateInsurerDto} updateInsurerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    insurersControllerUpdate(id: string, updateInsurerDto: UpdateInsurerDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Insurer, any>>;
}
/**
 * LocationsApi - axios parameter creator
 * @export
 */
export declare const LocationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create location
     * @param {CreateLocationDto} createLocationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsControllerCreate: (createLocationDto: CreateLocationDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a location by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LocationsApi - functional programming interface
 * @export
 */
export declare const LocationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create location
     * @param {CreateLocationDto} createLocationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsControllerCreate(createLocationDto: CreateLocationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary List all locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Location>>>;
    /**
     *
     * @summary Get a location by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>>;
};
/**
 * LocationsApi - factory interface
 * @export
 */
export declare const LocationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create location
     * @param {CreateLocationDto} createLocationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsControllerCreate(createLocationDto: CreateLocationDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List all locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Location>>;
    /**
     *
     * @summary Get a location by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Location>;
};
/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export declare class LocationsApi extends BaseAPI {
    /**
     *
     * @summary Create location
     * @param {CreateLocationDto} createLocationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    locationsControllerCreate(createLocationDto: CreateLocationDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary List all locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    locationsControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Location[], any>>;
    /**
     *
     * @summary Get a location by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    locationsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Location, any>>;
}
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export declare const PaymentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary List all payment types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentsControllerFindAllPaymentTypes: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PaymentsApi - functional programming interface
 * @export
 */
export declare const PaymentsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary List all payment types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentsControllerFindAllPaymentTypes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentType>>>;
};
/**
 * PaymentsApi - factory interface
 * @export
 */
export declare const PaymentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary List all payment types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentsControllerFindAllPaymentTypes(options?: RawAxiosRequestConfig): AxiosPromise<Array<PaymentType>>;
};
/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export declare class PaymentsApi extends BaseAPI {
    /**
     *
     * @summary List all payment types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    paymentsControllerFindAllPaymentTypes(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentType[], any>>;
}
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export declare const ReportsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary List all reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Request trips per day report
     * @param {TripsPerDayDto} tripsPerDayDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerRequestTripsPerDay: (tripsPerDayDto: TripsPerDayDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Request trips status changes report
     * @param {TripsStatusChangesDto} tripsStatusChangesDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerRequestTripsStatusChanges: (tripsStatusChangesDto: TripsStatusChangesDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ReportsApi - functional programming interface
 * @export
 */
export declare const ReportsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary List all reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Report>>>;
    /**
     *
     * @summary Request trips per day report
     * @param {TripsPerDayDto} tripsPerDayDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerRequestTripsPerDay(tripsPerDayDto: TripsPerDayDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Request trips status changes report
     * @param {TripsStatusChangesDto} tripsStatusChangesDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto: TripsStatusChangesDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ReportsApi - factory interface
 * @export
 */
export declare const ReportsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary List all reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Report>>;
    /**
     *
     * @summary Request trips per day report
     * @param {TripsPerDayDto} tripsPerDayDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerRequestTripsPerDay(tripsPerDayDto: TripsPerDayDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Request trips status changes report
     * @param {TripsStatusChangesDto} tripsStatusChangesDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto: TripsStatusChangesDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export declare class ReportsApi extends BaseAPI {
    /**
     *
     * @summary List all reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Report[], any>>;
    /**
     *
     * @summary Request trips per day report
     * @param {TripsPerDayDto} tripsPerDayDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerRequestTripsPerDay(tripsPerDayDto: TripsPerDayDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Request trips status changes report
     * @param {TripsStatusChangesDto} tripsStatusChangesDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto: TripsStatusChangesDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * RolesApi - axios parameter creator
 * @export
 */
export declare const RolesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create role
     * @param {CreateRoleDto} createRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerCreate: (createRoleDto: CreateRoleDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a role by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a role
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a role
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerUpdate: (id: string, body: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RolesApi - functional programming interface
 * @export
 */
export declare const RolesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create role
     * @param {CreateRoleDto} createRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerCreate(createRoleDto: CreateRoleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>>;
    /**
     *
     * @summary List all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>>;
    /**
     *
     * @summary Get a role by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>>;
    /**
     *
     * @summary Delete a role
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a role
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>>;
};
/**
 * RolesApi - factory interface
 * @export
 */
export declare const RolesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create role
     * @param {CreateRoleDto} createRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerCreate(createRoleDto: CreateRoleDto, options?: RawAxiosRequestConfig): AxiosPromise<Role>;
    /**
     *
     * @summary List all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Role>>;
    /**
     *
     * @summary Get a role by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Role>;
    /**
     *
     * @summary Delete a role
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update a role
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Role>;
};
/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export declare class RolesApi extends BaseAPI {
    /**
     *
     * @summary Create role
     * @param {CreateRoleDto} createRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerCreate(createRoleDto: CreateRoleDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Role, any>>;
    /**
     *
     * @summary List all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Role[], any>>;
    /**
     *
     * @summary Get a role by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Role, any>>;
    /**
     *
     * @summary Delete a role
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a role
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Role, any>>;
}
/**
 * SettingsApi - axios parameter creator
 * @export
 */
export declare const SettingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create setting
     * @param {CreateSettingDto} createSettingDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerCreate: (createSettingDto: CreateSettingDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a setting by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a setting
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a setting
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerUpdate: (id: string, body: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SettingsApi - functional programming interface
 * @export
 */
export declare const SettingsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create setting
     * @param {CreateSettingDto} createSettingDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerCreate(createSettingDto: CreateSettingDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Setting>>;
    /**
     *
     * @summary List all settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Setting>>>;
    /**
     *
     * @summary Get a setting by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Setting>>;
    /**
     *
     * @summary Delete a setting
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a setting
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Setting>>;
};
/**
 * SettingsApi - factory interface
 * @export
 */
export declare const SettingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create setting
     * @param {CreateSettingDto} createSettingDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerCreate(createSettingDto: CreateSettingDto, options?: RawAxiosRequestConfig): AxiosPromise<Setting>;
    /**
     *
     * @summary List all settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Setting>>;
    /**
     *
     * @summary Get a setting by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Setting>;
    /**
     *
     * @summary Delete a setting
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update a setting
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Setting>;
};
/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export declare class SettingsApi extends BaseAPI {
    /**
     *
     * @summary Create setting
     * @param {CreateSettingDto} createSettingDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    settingsControllerCreate(createSettingDto: CreateSettingDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Setting, any>>;
    /**
     *
     * @summary List all settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    settingsControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Setting[], any>>;
    /**
     *
     * @summary Get a setting by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    settingsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Setting, any>>;
    /**
     *
     * @summary Delete a setting
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    settingsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a setting
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    settingsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Setting, any>>;
}
/**
 * SettlementsApi - axios parameter creator
 * @export
 */
export declare const SettlementsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Calculate settlements for providers (TODO: Remove)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settlementsControllerCalculateForDrivers: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all settlements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settlementsControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Request settlement email
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settlementsControllerRequestEmail: (body: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SettlementsApi - functional programming interface
 * @export
 */
export declare const SettlementsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Calculate settlements for providers (TODO: Remove)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settlementsControllerCalculateForDrivers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary List all settlements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settlementsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Settlement>>>;
    /**
     *
     * @summary Request settlement email
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settlementsControllerRequestEmail(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * SettlementsApi - factory interface
 * @export
 */
export declare const SettlementsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Calculate settlements for providers (TODO: Remove)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settlementsControllerCalculateForDrivers(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List all settlements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settlementsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Settlement>>;
    /**
     *
     * @summary Request settlement email
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settlementsControllerRequestEmail(body: object, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * SettlementsApi - object-oriented interface
 * @export
 * @class SettlementsApi
 * @extends {BaseAPI}
 */
export declare class SettlementsApi extends BaseAPI {
    /**
     *
     * @summary Calculate settlements for providers (TODO: Remove)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementsApi
     */
    settlementsControllerCalculateForDrivers(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary List all settlements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementsApi
     */
    settlementsControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Settlement[], any>>;
    /**
     *
     * @summary Request settlement email
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementsApi
     */
    settlementsControllerRequestEmail(body: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * TicketsApi - axios parameter creator
 * @export
 */
export declare const TicketsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Assign a ticket to a crane
     * @param {string} ticketId
     * @param {string} craneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerAssign: (ticketId: string, craneId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create ticket
     * @param {CreateTicketDto} createTicketDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerCreate: (createTicketDto: CreateTicketDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create event from SIR
     * @param {SirEventDto} sirEventDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerCreateEventFromSir: (sirEventDto: SirEventDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a ticket comment
     * @param {CreateTicketCommentDto} createTicketCommentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerCreateTicketComment: (createTicketCommentDto: CreateTicketCommentDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all tickets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all tickets (beta)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindAllBeta: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a ticket by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Find tickets for board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindTickets: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all tickets that belong to a driver
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindTicketsByDriverId: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get arrival time for a crane to a ticket
     * @param {string} ticketId
     * @param {string} craneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerGetArrivalTimeCrane: (ticketId: string, craneId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get nearby cranes for a ticket
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerGetNearbyCranes: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a ticket
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a ticket
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerUpdate: (id: string, body: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a ticket step
     * @param {number} id
     * @param {UpdateTicketStepDto} updateTicketStepDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerUpdateTicketStep: (id: number, updateTicketStepDto: UpdateTicketStepDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TicketsApi - functional programming interface
 * @export
 */
export declare const TicketsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Assign a ticket to a crane
     * @param {string} ticketId
     * @param {string} craneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerAssign(ticketId: string, craneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Create ticket
     * @param {CreateTicketDto} createTicketDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerCreate(createTicketDto: CreateTicketDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>>;
    /**
     *
     * @summary Create event from SIR
     * @param {SirEventDto} sirEventDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerCreateEventFromSir(sirEventDto: SirEventDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Create a ticket comment
     * @param {CreateTicketCommentDto} createTicketCommentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerCreateTicketComment(createTicketCommentDto: CreateTicketCommentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary List all tickets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>>;
    /**
     *
     * @summary List all tickets (beta)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindAllBeta(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>>;
    /**
     *
     * @summary Get a ticket by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>>;
    /**
     *
     * @summary Find tickets for board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindTickets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>>;
    /**
     *
     * @summary List all tickets that belong to a driver
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindTicketsByDriverId(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Get arrival time for a crane to a ticket
     * @param {string} ticketId
     * @param {string} craneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerGetArrivalTimeCrane(ticketId: string, craneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get nearby cranes for a ticket
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerGetNearbyCranes(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a ticket
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a ticket
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>>;
    /**
     *
     * @summary Update a ticket step
     * @param {number} id
     * @param {UpdateTicketStepDto} updateTicketStepDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerUpdateTicketStep(id: number, updateTicketStepDto: UpdateTicketStepDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * TicketsApi - factory interface
 * @export
 */
export declare const TicketsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Assign a ticket to a crane
     * @param {string} ticketId
     * @param {string} craneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerAssign(ticketId: string, craneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Create ticket
     * @param {CreateTicketDto} createTicketDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerCreate(createTicketDto: CreateTicketDto, options?: RawAxiosRequestConfig): AxiosPromise<Ticket>;
    /**
     *
     * @summary Create event from SIR
     * @param {SirEventDto} sirEventDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerCreateEventFromSir(sirEventDto: SirEventDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Create a ticket comment
     * @param {CreateTicketCommentDto} createTicketCommentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerCreateTicketComment(createTicketCommentDto: CreateTicketCommentDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List all tickets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Ticket>>;
    /**
     *
     * @summary List all tickets (beta)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindAllBeta(options?: RawAxiosRequestConfig): AxiosPromise<Array<Ticket>>;
    /**
     *
     * @summary Get a ticket by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Ticket>;
    /**
     *
     * @summary Find tickets for board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindTickets(options?: RawAxiosRequestConfig): AxiosPromise<Array<Ticket>>;
    /**
     *
     * @summary List all tickets that belong to a driver
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerFindTicketsByDriverId(options?: RawAxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Get arrival time for a crane to a ticket
     * @param {string} ticketId
     * @param {string} craneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerGetArrivalTimeCrane(ticketId: string, craneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get nearby cranes for a ticket
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerGetNearbyCranes(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a ticket
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update a ticket
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Ticket>;
    /**
     *
     * @summary Update a ticket step
     * @param {number} id
     * @param {UpdateTicketStepDto} updateTicketStepDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ticketsControllerUpdateTicketStep(id: number, updateTicketStepDto: UpdateTicketStepDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * TicketsApi - object-oriented interface
 * @export
 * @class TicketsApi
 * @extends {BaseAPI}
 */
export declare class TicketsApi extends BaseAPI {
    /**
     *
     * @summary Assign a ticket to a crane
     * @param {string} ticketId
     * @param {string} craneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerAssign(ticketId: string, craneId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Create ticket
     * @param {CreateTicketDto} createTicketDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerCreate(createTicketDto: CreateTicketDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Ticket, any>>;
    /**
     *
     * @summary Create event from SIR
     * @param {SirEventDto} sirEventDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerCreateEventFromSir(sirEventDto: SirEventDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Create a ticket comment
     * @param {CreateTicketCommentDto} createTicketCommentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerCreateTicketComment(createTicketCommentDto: CreateTicketCommentDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary List all tickets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Ticket[], any>>;
    /**
     *
     * @summary List all tickets (beta)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerFindAllBeta(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Ticket[], any>>;
    /**
     *
     * @summary Get a ticket by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Ticket, any>>;
    /**
     *
     * @summary Find tickets for board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerFindTickets(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Ticket[], any>>;
    /**
     *
     * @summary List all tickets that belong to a driver
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerFindTicketsByDriverId(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Get arrival time for a crane to a ticket
     * @param {string} ticketId
     * @param {string} craneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerGetArrivalTimeCrane(ticketId: string, craneId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get nearby cranes for a ticket
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerGetNearbyCranes(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a ticket
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a ticket
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Ticket, any>>;
    /**
     *
     * @summary Update a ticket step
     * @param {number} id
     * @param {UpdateTicketStepDto} updateTicketStepDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    ticketsControllerUpdateTicketStep(id: number, updateTicketStepDto: UpdateTicketStepDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * TractionTypesApi - axios parameter creator
 * @export
 */
export declare const TractionTypesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary List all traction types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tractionTypesControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a traction type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tractionTypesControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TractionTypesApi - functional programming interface
 * @export
 */
export declare const TractionTypesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary List all traction types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tractionTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TractionType>>>;
    /**
     *
     * @summary Get a traction type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tractionTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TractionType>>;
};
/**
 * TractionTypesApi - factory interface
 * @export
 */
export declare const TractionTypesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary List all traction types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tractionTypesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<TractionType>>;
    /**
     *
     * @summary Get a traction type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tractionTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<TractionType>;
};
/**
 * TractionTypesApi - object-oriented interface
 * @export
 * @class TractionTypesApi
 * @extends {BaseAPI}
 */
export declare class TractionTypesApi extends BaseAPI {
    /**
     *
     * @summary List all traction types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TractionTypesApi
     */
    tractionTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TractionType[], any>>;
    /**
     *
     * @summary Get a traction type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TractionTypesApi
     */
    tractionTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TractionType, any>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create user
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerCreate: (createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a user by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a user
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerUpdate: (id: string, body: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create user
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     *
     * @summary Get a user by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Delete a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a user
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create user
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>>;
    /**
     *
     * @summary Get a user by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @summary Delete a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update a user
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<User>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     *
     * @summary Create user
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User[], any>>;
    /**
     *
     * @summary Get a user by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @summary Delete a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a user
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
}
/**
 * VehicleBrandModelsApi - axios parameter creator
 * @export
 */
export declare const VehicleBrandModelsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create vehicle brand model
     * @param {CreateVehicleBrandModelDto} createVehicleBrandModelDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerCreate: (createVehicleBrandModelDto: CreateVehicleBrandModelDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all vehicle brand models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a vehicle brand model by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a vehicle brand model
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a vehicle brand model
     * @param {string} id
     * @param {UpdateVehicleBrandModelDto} updateVehicleBrandModelDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerUpdate: (id: string, updateVehicleBrandModelDto: UpdateVehicleBrandModelDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VehicleBrandModelsApi - functional programming interface
 * @export
 */
export declare const VehicleBrandModelsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create vehicle brand model
     * @param {CreateVehicleBrandModelDto} createVehicleBrandModelDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerCreate(createVehicleBrandModelDto: CreateVehicleBrandModelDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleBrandModel>>;
    /**
     *
     * @summary List all vehicle brand models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleBrandModel>>>;
    /**
     *
     * @summary Get a vehicle brand model by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleBrandModel>>;
    /**
     *
     * @summary Delete a vehicle brand model
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a vehicle brand model
     * @param {string} id
     * @param {UpdateVehicleBrandModelDto} updateVehicleBrandModelDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerUpdate(id: string, updateVehicleBrandModelDto: UpdateVehicleBrandModelDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleBrandModel>>;
};
/**
 * VehicleBrandModelsApi - factory interface
 * @export
 */
export declare const VehicleBrandModelsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create vehicle brand model
     * @param {CreateVehicleBrandModelDto} createVehicleBrandModelDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerCreate(createVehicleBrandModelDto: CreateVehicleBrandModelDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleBrandModel>;
    /**
     *
     * @summary List all vehicle brand models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<VehicleBrandModel>>;
    /**
     *
     * @summary Get a vehicle brand model by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<VehicleBrandModel>;
    /**
     *
     * @summary Delete a vehicle brand model
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update a vehicle brand model
     * @param {string} id
     * @param {UpdateVehicleBrandModelDto} updateVehicleBrandModelDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandModelsControllerUpdate(id: string, updateVehicleBrandModelDto: UpdateVehicleBrandModelDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleBrandModel>;
};
/**
 * VehicleBrandModelsApi - object-oriented interface
 * @export
 * @class VehicleBrandModelsApi
 * @extends {BaseAPI}
 */
export declare class VehicleBrandModelsApi extends BaseAPI {
    /**
     *
     * @summary Create vehicle brand model
     * @param {CreateVehicleBrandModelDto} createVehicleBrandModelDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    vehicleBrandModelsControllerCreate(createVehicleBrandModelDto: CreateVehicleBrandModelDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleBrandModel, any>>;
    /**
     *
     * @summary List all vehicle brand models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    vehicleBrandModelsControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleBrandModel[], any>>;
    /**
     *
     * @summary Get a vehicle brand model by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    vehicleBrandModelsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleBrandModel, any>>;
    /**
     *
     * @summary Delete a vehicle brand model
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    vehicleBrandModelsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a vehicle brand model
     * @param {string} id
     * @param {UpdateVehicleBrandModelDto} updateVehicleBrandModelDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    vehicleBrandModelsControllerUpdate(id: string, updateVehicleBrandModelDto: UpdateVehicleBrandModelDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleBrandModel, any>>;
}
/**
 * VehicleBrandsApi - axios parameter creator
 * @export
 */
export declare const VehicleBrandsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create vehicle brand
     * @param {CreateVehicleBrandDto} createVehicleBrandDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerCreate: (createVehicleBrandDto: CreateVehicleBrandDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all vehicle brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a vehicle brand by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a vehicle brand
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a vehicle brand
     * @param {string} id
     * @param {UpdateVehicleBrandDto} updateVehicleBrandDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerUpdate: (id: string, updateVehicleBrandDto: UpdateVehicleBrandDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VehicleBrandsApi - functional programming interface
 * @export
 */
export declare const VehicleBrandsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create vehicle brand
     * @param {CreateVehicleBrandDto} createVehicleBrandDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerCreate(createVehicleBrandDto: CreateVehicleBrandDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleBrand>>;
    /**
     *
     * @summary List all vehicle brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleBrand>>>;
    /**
     *
     * @summary Get a vehicle brand by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleBrand>>;
    /**
     *
     * @summary Delete a vehicle brand
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a vehicle brand
     * @param {string} id
     * @param {UpdateVehicleBrandDto} updateVehicleBrandDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerUpdate(id: string, updateVehicleBrandDto: UpdateVehicleBrandDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleBrand>>;
};
/**
 * VehicleBrandsApi - factory interface
 * @export
 */
export declare const VehicleBrandsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create vehicle brand
     * @param {CreateVehicleBrandDto} createVehicleBrandDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerCreate(createVehicleBrandDto: CreateVehicleBrandDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleBrand>;
    /**
     *
     * @summary List all vehicle brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<VehicleBrand>>;
    /**
     *
     * @summary Get a vehicle brand by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<VehicleBrand>;
    /**
     *
     * @summary Delete a vehicle brand
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update a vehicle brand
     * @param {string} id
     * @param {UpdateVehicleBrandDto} updateVehicleBrandDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleBrandsControllerUpdate(id: string, updateVehicleBrandDto: UpdateVehicleBrandDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleBrand>;
};
/**
 * VehicleBrandsApi - object-oriented interface
 * @export
 * @class VehicleBrandsApi
 * @extends {BaseAPI}
 */
export declare class VehicleBrandsApi extends BaseAPI {
    /**
     *
     * @summary Create vehicle brand
     * @param {CreateVehicleBrandDto} createVehicleBrandDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    vehicleBrandsControllerCreate(createVehicleBrandDto: CreateVehicleBrandDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleBrand, any>>;
    /**
     *
     * @summary List all vehicle brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    vehicleBrandsControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleBrand[], any>>;
    /**
     *
     * @summary Get a vehicle brand by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    vehicleBrandsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleBrand, any>>;
    /**
     *
     * @summary Delete a vehicle brand
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    vehicleBrandsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a vehicle brand
     * @param {string} id
     * @param {UpdateVehicleBrandDto} updateVehicleBrandDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    vehicleBrandsControllerUpdate(id: string, updateVehicleBrandDto: UpdateVehicleBrandDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleBrand, any>>;
}
/**
 * VehicleColorsApi - axios parameter creator
 * @export
 */
export declare const VehicleColorsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create vehicle color
     * @param {CreateVehicleColorDto} createVehicleColorDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleColorsControllerCreate: (createVehicleColorDto: CreateVehicleColorDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all vehicle colors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleColorsControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VehicleColorsApi - functional programming interface
 * @export
 */
export declare const VehicleColorsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create vehicle color
     * @param {CreateVehicleColorDto} createVehicleColorDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleColorsControllerCreate(createVehicleColorDto: CreateVehicleColorDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleColor>>;
    /**
     *
     * @summary List all vehicle colors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleColorsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleColor>>>;
};
/**
 * VehicleColorsApi - factory interface
 * @export
 */
export declare const VehicleColorsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create vehicle color
     * @param {CreateVehicleColorDto} createVehicleColorDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleColorsControllerCreate(createVehicleColorDto: CreateVehicleColorDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleColor>;
    /**
     *
     * @summary List all vehicle colors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleColorsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<VehicleColor>>;
};
/**
 * VehicleColorsApi - object-oriented interface
 * @export
 * @class VehicleColorsApi
 * @extends {BaseAPI}
 */
export declare class VehicleColorsApi extends BaseAPI {
    /**
     *
     * @summary Create vehicle color
     * @param {CreateVehicleColorDto} createVehicleColorDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleColorsApi
     */
    vehicleColorsControllerCreate(createVehicleColorDto: CreateVehicleColorDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleColor, any>>;
    /**
     *
     * @summary List all vehicle colors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleColorsApi
     */
    vehicleColorsControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleColor[], any>>;
}
/**
 * VehicleTypesApi - axios parameter creator
 * @export
 */
export declare const VehicleTypesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create vehicle type
     * @param {CreateVehicleTypeDto} createVehicleTypeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerCreate: (createVehicleTypeDto: CreateVehicleTypeDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all vehicle types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a vehicle type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a vehicle type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a vehicle type
     * @param {string} id
     * @param {UpdateVehicleTypeDto} updateVehicleTypeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerUpdate: (id: string, updateVehicleTypeDto: UpdateVehicleTypeDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VehicleTypesApi - functional programming interface
 * @export
 */
export declare const VehicleTypesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create vehicle type
     * @param {CreateVehicleTypeDto} createVehicleTypeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerCreate(createVehicleTypeDto: CreateVehicleTypeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleType>>;
    /**
     *
     * @summary List all vehicle types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleType>>>;
    /**
     *
     * @summary Get a vehicle type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleType>>;
    /**
     *
     * @summary Delete a vehicle type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a vehicle type
     * @param {string} id
     * @param {UpdateVehicleTypeDto} updateVehicleTypeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerUpdate(id: string, updateVehicleTypeDto: UpdateVehicleTypeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleType>>;
};
/**
 * VehicleTypesApi - factory interface
 * @export
 */
export declare const VehicleTypesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create vehicle type
     * @param {CreateVehicleTypeDto} createVehicleTypeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerCreate(createVehicleTypeDto: CreateVehicleTypeDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleType>;
    /**
     *
     * @summary List all vehicle types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<VehicleType>>;
    /**
     *
     * @summary Get a vehicle type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<VehicleType>;
    /**
     *
     * @summary Delete a vehicle type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update a vehicle type
     * @param {string} id
     * @param {UpdateVehicleTypeDto} updateVehicleTypeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleTypesControllerUpdate(id: string, updateVehicleTypeDto: UpdateVehicleTypeDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleType>;
};
/**
 * VehicleTypesApi - object-oriented interface
 * @export
 * @class VehicleTypesApi
 * @extends {BaseAPI}
 */
export declare class VehicleTypesApi extends BaseAPI {
    /**
     *
     * @summary Create vehicle type
     * @param {CreateVehicleTypeDto} createVehicleTypeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    vehicleTypesControllerCreate(createVehicleTypeDto: CreateVehicleTypeDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleType, any>>;
    /**
     *
     * @summary List all vehicle types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    vehicleTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleType[], any>>;
    /**
     *
     * @summary Get a vehicle type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    vehicleTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleType, any>>;
    /**
     *
     * @summary Delete a vehicle type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    vehicleTypesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a vehicle type
     * @param {string} id
     * @param {UpdateVehicleTypeDto} updateVehicleTypeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    vehicleTypesControllerUpdate(id: string, updateVehicleTypeDto: UpdateVehicleTypeDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleType, any>>;
}
/**
 * VehicleWheelTypesApi - axios parameter creator
 * @export
 */
export declare const VehicleWheelTypesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary List all vehicle wheel types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleWheelTypesControllerFindAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a vehicle wheel type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleWheelTypesControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VehicleWheelTypesApi - functional programming interface
 * @export
 */
export declare const VehicleWheelTypesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary List all vehicle wheel types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleWheelTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleWheelType>>>;
    /**
     *
     * @summary Get a vehicle wheel type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleWheelTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleWheelType>>;
};
/**
 * VehicleWheelTypesApi - factory interface
 * @export
 */
export declare const VehicleWheelTypesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary List all vehicle wheel types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleWheelTypesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<VehicleWheelType>>;
    /**
     *
     * @summary Get a vehicle wheel type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vehicleWheelTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<VehicleWheelType>;
};
/**
 * VehicleWheelTypesApi - object-oriented interface
 * @export
 * @class VehicleWheelTypesApi
 * @extends {BaseAPI}
 */
export declare class VehicleWheelTypesApi extends BaseAPI {
    /**
     *
     * @summary List all vehicle wheel types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleWheelTypesApi
     */
    vehicleWheelTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleWheelType[], any>>;
    /**
     *
     * @summary Get a vehicle wheel type by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleWheelTypesApi
     */
    vehicleWheelTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VehicleWheelType, any>>;
}
