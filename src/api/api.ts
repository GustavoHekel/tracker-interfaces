/* tslint:disable */
/* eslint-disable */
/**
 * Tracker API
 * Tracker API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AssignCraneDto
 */
export interface AssignCraneDto {
    /**
     * 
     * @type {number}
     * @memberof AssignCraneDto
     */
    'userId': number;
    /**
     * 
     * @type {number}
     * @memberof AssignCraneDto
     */
    'craneId': number;
    /**
     * 
     * @type {number}
     * @memberof AssignCraneDto
     */
    'userActionId': number;
}
/**
 * 
 * @export
 * @interface Base
 */
export interface Base {
    /**
     * 
     * @type {number}
     * @memberof Base
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Base
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof Base
     */
    'coordinates': object;
    /**
     * 
     * @type {string}
     * @memberof Base
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Base
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Base
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface CoordinateDto
 */
export interface CoordinateDto {
    /**
     * 
     * @type {string}
     * @memberof CoordinateDto
     */
    'type': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoordinateDto
     */
    'coordinates': Array<string>;
}
/**
 * 
 * @export
 * @interface Crane
 */
export interface Crane {
    /**
     * 
     * @type {number}
     * @memberof Crane
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Crane
     */
    'number': string;
    /**
     * 
     * @type {string}
     * @memberof Crane
     */
    'domain': string;
    /**
     * 
     * @type {string}
     * @memberof Crane
     */
    'year': string;
    /**
     * 
     * @type {string}
     * @memberof Crane
     */
    'model': string;
    /**
     * 
     * @type {number}
     * @memberof Crane
     */
    'typeId': number;
    /**
     * 
     * @type {number}
     * @memberof Crane
     */
    'statusId': number;
    /**
     * 
     * @type {number}
     * @memberof Crane
     */
    'baseId': number;
    /**
     * 
     * @type {number}
     * @memberof Crane
     */
    'lastKnownLocationId': number;
    /**
     * 
     * @type {string}
     * @memberof Crane
     */
    'lastKnownLocationCreatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Crane
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Crane
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Crane
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface CraneSummaryDto
 */
export interface CraneSummaryDto {
    /**
     * 
     * @type {number}
     * @memberof CraneSummaryDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CraneSummaryDto
     */
    'number': string;
    /**
     * 
     * @type {number}
     * @memberof CraneSummaryDto
     */
    'trip_quantity': number;
    /**
     * 
     * @type {number}
     * @memberof CraneSummaryDto
     */
    'cranes_status_id': number;
    /**
     * 
     * @type {string}
     * @memberof CraneSummaryDto
     */
    'user': string;
}
/**
 * 
 * @export
 * @interface CranesStatusDto
 */
export interface CranesStatusDto {
    /**
     * 
     * @type {number}
     * @memberof CranesStatusDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CranesStatusDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateBaseDto
 */
export interface CreateBaseDto {
    /**
     * 
     * @type {string}
     * @memberof CreateBaseDto
     */
    'name': string;
    /**
     * 
     * @type {CoordinateDto}
     * @memberof CreateBaseDto
     */
    'coordinates': CoordinateDto;
}
/**
 * 
 * @export
 * @interface CreateClientDto
 */
export interface CreateClientDto {
    /**
     * 
     * @type {string}
     * @memberof CreateClientDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateCraneDto
 */
export interface CreateCraneDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCraneDto
     */
    'number': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCraneDto
     */
    'domain': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCraneDto
     */
    'year': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCraneDto
     */
    'model': string;
    /**
     * 
     * @type {number}
     * @memberof CreateCraneDto
     */
    'typeId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateCraneDto
     */
    'statusId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateCraneDto
     */
    'baseId': number;
}
/**
 * 
 * @export
 * @interface CreateInsurerDto
 */
export interface CreateInsurerDto {
    /**
     * 
     * @type {string}
     * @memberof CreateInsurerDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CreateInsurerDto
     */
    'clientId': number;
}
/**
 * 
 * @export
 * @interface CreateLocationDto
 */
export interface CreateLocationDto {
    /**
     * 
     * @type {CoordinateDto}
     * @memberof CreateLocationDto
     */
    'coordinates': CoordinateDto;
}
/**
 * 
 * @export
 * @interface CreateRoleDto
 */
export interface CreateRoleDto {
    /**
     * 
     * @type {string}
     * @memberof CreateRoleDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateSettingDto
 */
export interface CreateSettingDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSettingDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSettingDto
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface CreateTicketCommentDto
 */
export interface CreateTicketCommentDto {
    /**
     * 
     * @type {number}
     * @memberof CreateTicketCommentDto
     */
    'ticketId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketCommentDto
     */
    'comment': string;
}
/**
 * 
 * @export
 * @interface CreateTicketDto
 */
export interface CreateTicketDto {
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'statusId': number;
    /**
     * 
     * @type {object}
     * @memberof CreateTicketDto
     */
    'metadata': object;
    /**
     * 
     * @type {object}
     * @memberof CreateTicketDto
     */
    'metadataJson': object;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'sirId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'ticketTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'clientId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'customer': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'phone': string;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'insurerId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'vehicleTypeId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'vehicleBrandId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'vehicleBrandModelId': string;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleYear': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleColorId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleWheelTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleGearBoxTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleTractionTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleHeight': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleWidth': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'vehicleLength': number;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'plate': string;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'passengers': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'delayValueId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'paymentTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'paymentAmountDue': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateTicketDto
     */
    'isScheduled': boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'scheduledAt': string;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'originPlaceId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'destinationPlaceId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'distance': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'userId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'workingHours': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'waitingHours': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'returnToBaseDistance': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'extraction': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'movement': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'tolls': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateTicketDto
     */
    'repaired': boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'cancellationTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'cancelledTicketSettlementTypeId': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateTicketDto
     */
    'containsErrors': boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'originalTicketId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'ordinalInDay': string;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof CreateUserDto
     */
    'roleId': number;
}
/**
 * 
 * @export
 * @interface CreateVehicleBrandDto
 */
export interface CreateVehicleBrandDto {
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleBrandDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateVehicleBrandModelDto
 */
export interface CreateVehicleBrandModelDto {
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleBrandModelDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CreateVehicleBrandModelDto
     */
    'vehicleBrandId': number;
}
/**
 * 
 * @export
 * @interface CreateVehicleTypeDto
 */
export interface CreateVehicleTypeDto {
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleTypeDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface DelayValue
 */
export interface DelayValue {
    /**
     * 
     * @type {number}
     * @memberof DelayValue
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof DelayValue
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface GearBoxType
 */
export interface GearBoxType {
    /**
     * 
     * @type {number}
     * @memberof GearBoxType
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GearBoxType
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Insurer
 */
export interface Insurer {
    /**
     * 
     * @type {number}
     * @memberof Insurer
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Insurer
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Insurer
     */
    'clientId': number;
}
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'id': number;
    /**
     * 
     * @type {object}
     * @memberof Location
     */
    'coordinates': object;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'scope'?: string;
}
/**
 * 
 * @export
 * @interface LogoutDto
 */
export interface LogoutDto {
    /**
     * 
     * @type {string}
     * @memberof LogoutDto
     */
    'scope'?: string;
}
/**
 * 
 * @export
 * @interface PaymentType
 */
export interface PaymentType {
    /**
     * 
     * @type {number}
     * @memberof PaymentType
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PaymentType
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * 
     * @type {number}
     * @memberof Report
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface Setting
 */
export interface Setting {
    /**
     * 
     * @type {number}
     * @memberof Setting
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface Settlement
 */
export interface Settlement {
    /**
     * 
     * @type {number}
     * @memberof Settlement
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Settlement
     */
    'ticketId': number;
    /**
     * 
     * @type {number}
     * @memberof Settlement
     */
    'fareScopeId': number;
    /**
     * 
     * @type {number}
     * @memberof Settlement
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof Settlement
     */
    'period': number;
    /**
     * 
     * @type {string}
     * @memberof Settlement
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Settlement
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface SirEventDto
 */
export interface SirEventDto {
    /**
     * 
     * @type {number}
     * @memberof SirEventDto
     */
    'sirId': number;
    /**
     * 
     * @type {string}
     * @memberof SirEventDto
     */
    'eventType': SirEventDtoEventTypeEnum;
}

export const SirEventDtoEventTypeEnum = {
    Created: 'CREATED',
    Updated: 'UPDATED',
    Deleted: 'DELETED'
} as const;

export type SirEventDtoEventTypeEnum = typeof SirEventDtoEventTypeEnum[keyof typeof SirEventDtoEventTypeEnum];

/**
 * 
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'ticketStatusId': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'externalId': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'ticketTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'clientId': number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'customer': string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'phone': string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'insurerId': number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'vehicleTypeId': string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'vehicleBrandId': string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'vehicleBrandModelId': string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'vehicleYear': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'vehicleColorId': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'vehicleWheelTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'vehicleGearBoxTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'vehicleTractionTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'vehicleHeight': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'vehicleWidth': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'vehicleLength': number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'plate': string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'passengers': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'delayValueId': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'paymentTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'paymentAmountDue': number;
    /**
     * 
     * @type {boolean}
     * @memberof Ticket
     */
    'isScheduled': boolean;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'scheduledAt': string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'originPlaceId': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'destinationPlaceId': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'distance': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'userId': number;
    /**
     * 
     * @type {object}
     * @memberof Ticket
     */
    'metadataJson': object;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'workingHours': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'waitingHours': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'returnToBaseDistance': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'extraction': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'movement': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'tolls': number;
    /**
     * 
     * @type {boolean}
     * @memberof Ticket
     */
    'repaired': boolean;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'deletedAt': string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'cancellationTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'cancelledTicketSettlementTypeId': number;
    /**
     * 
     * @type {boolean}
     * @memberof Ticket
     */
    'containsErrors': boolean;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'originalTicketId': number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'ordinalInDay': string;
}
/**
 * 
 * @export
 * @interface TractionType
 */
export interface TractionType {
    /**
     * 
     * @type {number}
     * @memberof TractionType
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TractionType
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface TripsPerDayDto
 */
export interface TripsPerDayDto {
    /**
     * 
     * @type {string}
     * @memberof TripsPerDayDto
     */
    'statusId': string;
    /**
     * 
     * @type {string}
     * @memberof TripsPerDayDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof TripsPerDayDto
     */
    'dateTo': string;
}
/**
 * 
 * @export
 * @interface TripsStatusChangesDto
 */
export interface TripsStatusChangesDto {
    /**
     * 
     * @type {string}
     * @memberof TripsStatusChangesDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof TripsStatusChangesDto
     */
    'dateTo': string;
}
/**
 * 
 * @export
 * @interface UnassignCraneDto
 */
export interface UnassignCraneDto {
    /**
     * 
     * @type {number}
     * @memberof UnassignCraneDto
     */
    'userId': number;
    /**
     * 
     * @type {number}
     * @memberof UnassignCraneDto
     */
    'userActionId': number;
}
/**
 * 
 * @export
 * @interface UpdateInsurerDto
 */
export interface UpdateInsurerDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateInsurerDto
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateInsurerDto
     */
    'clientId'?: number;
}
/**
 * 
 * @export
 * @interface UpdateTicketStepDto
 */
export interface UpdateTicketStepDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateTicketStepDto
     */
    'km': number;
}
/**
 * 
 * @export
 * @interface UpdateVehicleBrandDto
 */
export interface UpdateVehicleBrandDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleBrandDto
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UpdateVehicleBrandModelDto
 */
export interface UpdateVehicleBrandModelDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleBrandModelDto
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateVehicleBrandModelDto
     */
    'vehicleBrandId'?: number;
}
/**
 * 
 * @export
 * @interface UpdateVehicleTypeDto
 */
export interface UpdateVehicleTypeDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleTypeDto
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'roleId': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface VehicleBrand
 */
export interface VehicleBrand {
    /**
     * 
     * @type {number}
     * @memberof VehicleBrand
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof VehicleBrand
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface VehicleBrandModel
 */
export interface VehicleBrandModel {
    /**
     * 
     * @type {number}
     * @memberof VehicleBrandModel
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof VehicleBrandModel
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof VehicleBrandModel
     */
    'vehicleBrandId': number;
}
/**
 * 
 * @export
 * @interface VehicleType
 */
export interface VehicleType {
    /**
     * 
     * @type {number}
     * @memberof VehicleType
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof VehicleType
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface VehicleWheelType
 */
export interface VehicleWheelType {
    /**
     * 
     * @type {number}
     * @memberof VehicleWheelType
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof VehicleWheelType
     */
    'name': string;
}

/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export const AnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get estimated trips
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetEstimatedTrips: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/estimated-trips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get total active cranes by status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalActiveCranesByStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/total-active-cranes-by-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get total distance per day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalDistancePerDay: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/total-distance-per-day`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get total trips for current day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsForCurrentDay: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/total-trips-for-current-day`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get total trips for current month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsForCurrentMonth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/total-trips-for-current-month`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get total trips per insurance company per month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/total-trips-per-insurance-company-per-month`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get total trips per location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerLocation: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/total-trips-per-location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get total trips per type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerType: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/total-trips-per-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get total trips per vehicle type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerVehicleType: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/total-trips-per-vehicle-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export const AnalyticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnalyticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get estimated trips
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetEstimatedTrips(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetEstimatedTrips(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetEstimatedTrips']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get total active cranes by status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetTotalActiveCranesByStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetTotalActiveCranesByStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetTotalActiveCranesByStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get total distance per day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetTotalDistancePerDay(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetTotalDistancePerDay(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetTotalDistancePerDay']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get total trips for current day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetTotalTripsForCurrentDay(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetTotalTripsForCurrentDay(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetTotalTripsForCurrentDay']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get total trips for current month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetTotalTripsForCurrentMonth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetTotalTripsForCurrentMonth(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetTotalTripsForCurrentMonth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get total trips per insurance company per month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get total trips per location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetTotalTripsPerLocation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetTotalTripsPerLocation(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetTotalTripsPerLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get total trips per type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetTotalTripsPerType(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetTotalTripsPerType(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetTotalTripsPerType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get total trips per vehicle type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetTotalTripsPerVehicleType(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetTotalTripsPerVehicleType(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetTotalTripsPerVehicleType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AnalyticsApi - factory interface
 * @export
 */
export const AnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnalyticsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get estimated trips
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetEstimatedTrips(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetEstimatedTrips(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get total active cranes by status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalActiveCranesByStatus(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetTotalActiveCranesByStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get total distance per day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalDistancePerDay(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetTotalDistancePerDay(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get total trips for current day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsForCurrentDay(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetTotalTripsForCurrentDay(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get total trips for current month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsForCurrentMonth(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetTotalTripsForCurrentMonth(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get total trips per insurance company per month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get total trips per location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerLocation(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetTotalTripsPerLocation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get total trips per type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerType(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetTotalTripsPerType(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get total trips per vehicle type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetTotalTripsPerVehicleType(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetTotalTripsPerVehicleType(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export class AnalyticsApi extends BaseAPI {
    /**
     * 
     * @summary Get estimated trips
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsControllerGetEstimatedTrips(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetEstimatedTrips(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get total active cranes by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsControllerGetTotalActiveCranesByStatus(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetTotalActiveCranesByStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get total distance per day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsControllerGetTotalDistancePerDay(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetTotalDistancePerDay(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get total trips for current day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsControllerGetTotalTripsForCurrentDay(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetTotalTripsForCurrentDay(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get total trips for current month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsControllerGetTotalTripsForCurrentMonth(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetTotalTripsForCurrentMonth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get total trips per insurance company per month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetTotalTripsPerInsuranceCompanyPerMonth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get total trips per location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsControllerGetTotalTripsPerLocation(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetTotalTripsPerLocation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get total trips per type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsControllerGetTotalTripsPerType(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetTotalTripsPerType(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get total trips per vehicle type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsControllerGetTotalTripsPerVehicleType(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetTotalTripsPerVehicleType(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get current user status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginDto: LoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerLogin', 'loginDto', loginDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User logout
         * @param {LogoutDto} logoutDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout: async (logoutDto: LogoutDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoutDto' is not null or undefined
            assertParamExists('authControllerLogout', 'logoutDto', logoutDto)
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logoutDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get current user status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGetStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerGetStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary User login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary User logout
         * @param {LogoutDto} logoutDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogout(logoutDto: LogoutDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(logoutDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Get current user status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetStatus(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.authControllerGetStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.authControllerLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User logout
         * @param {LogoutDto} logoutDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(logoutDto: LogoutDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerLogout(logoutDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Get current user status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerGetStatus(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerGetStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User login
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User logout
     * @param {LogoutDto} logoutDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogout(logoutDto: LogoutDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogout(logoutDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BasesApi - axios parameter creator
 * @export
 */
export const BasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create base
         * @param {CreateBaseDto} createBaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerCreate: async (createBaseDto: CreateBaseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBaseDto' is not null or undefined
            assertParamExists('basesControllerCreate', 'createBaseDto', createBaseDto)
            const localVarPath = `/bases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBaseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all bases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a base by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('basesControllerFindOne', 'id', id)
            const localVarPath = `/bases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a base
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('basesControllerRemove', 'id', id)
            const localVarPath = `/bases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a base
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('basesControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('basesControllerUpdate', 'body', body)
            const localVarPath = `/bases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasesApi - functional programming interface
 * @export
 */
export const BasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BasesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create base
         * @param {CreateBaseDto} createBaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async basesControllerCreate(createBaseDto: CreateBaseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Base>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.basesControllerCreate(createBaseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasesApi.basesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all bases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async basesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Base>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.basesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasesApi.basesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a base by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async basesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Base>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.basesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasesApi.basesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a base
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async basesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.basesControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasesApi.basesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a base
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async basesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Base>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.basesControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasesApi.basesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BasesApi - factory interface
 * @export
 */
export const BasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BasesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create base
         * @param {CreateBaseDto} createBaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerCreate(createBaseDto: CreateBaseDto, options?: RawAxiosRequestConfig): AxiosPromise<Base> {
            return localVarFp.basesControllerCreate(createBaseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all bases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Base>> {
            return localVarFp.basesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a base by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Base> {
            return localVarFp.basesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a base
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.basesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a base
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Base> {
            return localVarFp.basesControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BasesApi - object-oriented interface
 * @export
 * @class BasesApi
 * @extends {BaseAPI}
 */
export class BasesApi extends BaseAPI {
    /**
     * 
     * @summary Create base
     * @param {CreateBaseDto} createBaseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    public basesControllerCreate(createBaseDto: CreateBaseDto, options?: RawAxiosRequestConfig) {
        return BasesApiFp(this.configuration).basesControllerCreate(createBaseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all bases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    public basesControllerFindAll(options?: RawAxiosRequestConfig) {
        return BasesApiFp(this.configuration).basesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a base by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    public basesControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return BasesApiFp(this.configuration).basesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a base
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    public basesControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return BasesApiFp(this.configuration).basesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a base
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasesApi
     */
    public basesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return BasesApiFp(this.configuration).basesControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create client
         * @param {CreateClientDto} createClientDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerCreate: async (createClientDto: CreateClientDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createClientDto' is not null or undefined
            assertParamExists('clientsControllerCreate', 'createClientDto', createClientDto)
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createClientDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a client by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientsControllerFindOne', 'id', id)
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a client
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientsControllerRemove', 'id', id)
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a client
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientsControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('clientsControllerUpdate', 'body', body)
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create client
         * @param {CreateClientDto} createClientDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsControllerCreate(createClientDto: CreateClientDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsControllerCreate(createClientDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.clientsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Client>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.clientsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a client by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.clientsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a client
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.clientsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a client
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.clientsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create client
         * @param {CreateClientDto} createClientDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerCreate(createClientDto: CreateClientDto, options?: RawAxiosRequestConfig): AxiosPromise<Client> {
            return localVarFp.clientsControllerCreate(createClientDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Client>> {
            return localVarFp.clientsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a client by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Client> {
            return localVarFp.clientsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a client
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clientsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a client
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Client> {
            return localVarFp.clientsControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * 
     * @summary Create client
     * @param {CreateClientDto} createClientDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsControllerCreate(createClientDto: CreateClientDto, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsControllerCreate(createClientDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsControllerFindAll(options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a client by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a client
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a client
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CranesApi - axios parameter creator
 * @export
 */
export const CranesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assign a crane to a user
         * @param {AssignCraneDto} assignCraneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerAssign: async (assignCraneDto: AssignCraneDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignCraneDto' is not null or undefined
            assertParamExists('cranesControllerAssign', 'assignCraneDto', assignCraneDto)
            const localVarPath = `/cranes/assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignCraneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create crane
         * @param {CreateCraneDto} createCraneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerCreate: async (createCraneDto: CreateCraneDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCraneDto' is not null or undefined
            assertParamExists('cranesControllerCreate', 'createCraneDto', createCraneDto)
            const localVarPath = `/cranes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCraneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Calculate distance to a point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPoint: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cranes/distanceToPoint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Calculate distance to a point using an external API
         * @param {number} craneId 
         * @param {number} lat 
         * @param {number} lng 
         * @param {number} currentTicketId 
         * @param {number} ticketTypeid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPointApi: async (craneId: number, lat: number, lng: number, currentTicketId: number, ticketTypeid: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'craneId' is not null or undefined
            assertParamExists('cranesControllerDistanceToPointApi', 'craneId', craneId)
            // verify required parameter 'lat' is not null or undefined
            assertParamExists('cranesControllerDistanceToPointApi', 'lat', lat)
            // verify required parameter 'lng' is not null or undefined
            assertParamExists('cranesControllerDistanceToPointApi', 'lng', lng)
            // verify required parameter 'currentTicketId' is not null or undefined
            assertParamExists('cranesControllerDistanceToPointApi', 'currentTicketId', currentTicketId)
            // verify required parameter 'ticketTypeid' is not null or undefined
            assertParamExists('cranesControllerDistanceToPointApi', 'ticketTypeid', ticketTypeid)
            const localVarPath = `/cranes/distance-to-point-api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (craneId !== undefined) {
                localVarQueryParameter['craneId'] = craneId;
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }

            if (currentTicketId !== undefined) {
                localVarQueryParameter['currentTicketId'] = currentTicketId;
            }

            if (ticketTypeid !== undefined) {
                localVarQueryParameter['ticketTypeid'] = ticketTypeid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Calculate distance to a point for a specific crane
         * @param {string} id 
         * @param {string} lat 
         * @param {string} lng 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPointByCrane: async (id: string, lat: string, lng: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cranesControllerDistanceToPointByCrane', 'id', id)
            // verify required parameter 'lat' is not null or undefined
            assertParamExists('cranesControllerDistanceToPointByCrane', 'lat', lat)
            // verify required parameter 'lng' is not null or undefined
            assertParamExists('cranesControllerDistanceToPointByCrane', 'lng', lng)
            const localVarPath = `/cranes/{id}/distance-to-point`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all cranes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cranes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a crane by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cranesControllerFindOne', 'id', id)
            const localVarPath = `/cranes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all crane locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetAllCranesLocations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cranes/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the assignment history of a crane
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCraneHistory: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cranesControllerGetCraneHistory', 'id', id)
            const localVarPath = `/cranes/historyAssigned/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get cranes with finished drives
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCranesDriveFinished: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cranes/cranesDriveFinished`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the status of all cranes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCranesStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cranes/cranesStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a crane
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cranesControllerRemove', 'id', id)
            const localVarPath = `/cranes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tickets for a crane
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerTickets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cranes/tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unassign a crane from a user
         * @param {UnassignCraneDto} unassignCraneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerUnassign: async (unassignCraneDto: UnassignCraneDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unassignCraneDto' is not null or undefined
            assertParamExists('cranesControllerUnassign', 'unassignCraneDto', unassignCraneDto)
            const localVarPath = `/cranes/unassign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(unassignCraneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a crane
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cranesControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cranesControllerUpdate', 'body', body)
            const localVarPath = `/cranes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CranesApi - functional programming interface
 * @export
 */
export const CranesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CranesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Assign a crane to a user
         * @param {AssignCraneDto} assignCraneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerAssign(assignCraneDto: AssignCraneDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerAssign(assignCraneDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerAssign']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create crane
         * @param {CreateCraneDto} createCraneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerCreate(createCraneDto: CreateCraneDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Crane>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerCreate(createCraneDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Calculate distance to a point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerDistanceToPoint(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerDistanceToPoint(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerDistanceToPoint']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Calculate distance to a point using an external API
         * @param {number} craneId 
         * @param {number} lat 
         * @param {number} lng 
         * @param {number} currentTicketId 
         * @param {number} ticketTypeid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerDistanceToPointApi(craneId: number, lat: number, lng: number, currentTicketId: number, ticketTypeid: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerDistanceToPointApi(craneId, lat, lng, currentTicketId, ticketTypeid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerDistanceToPointApi']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Calculate distance to a point for a specific crane
         * @param {string} id 
         * @param {string} lat 
         * @param {string} lng 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerDistanceToPointByCrane(id: string, lat: string, lng: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerDistanceToPointByCrane(id, lat, lng, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerDistanceToPointByCrane']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all cranes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Crane>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a crane by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Crane>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all crane locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerGetAllCranesLocations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerGetAllCranesLocations(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerGetAllCranesLocations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the assignment history of a crane
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerGetCraneHistory(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerGetCraneHistory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerGetCraneHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get cranes with finished drives
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerGetCranesDriveFinished(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CraneSummaryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerGetCranesDriveFinished(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerGetCranesDriveFinished']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the status of all cranes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerGetCranesStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CranesStatusDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerGetCranesStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerGetCranesStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a crane
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get tickets for a crane
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerTickets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerTickets(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerTickets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Unassign a crane from a user
         * @param {UnassignCraneDto} unassignCraneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerUnassign(unassignCraneDto: UnassignCraneDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerUnassign(unassignCraneDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerUnassign']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a crane
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cranesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Crane>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cranesControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CranesApi.cranesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CranesApi - factory interface
 * @export
 */
export const CranesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CranesApiFp(configuration)
    return {
        /**
         * 
         * @summary Assign a crane to a user
         * @param {AssignCraneDto} assignCraneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerAssign(assignCraneDto: AssignCraneDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cranesControllerAssign(assignCraneDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create crane
         * @param {CreateCraneDto} createCraneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerCreate(createCraneDto: CreateCraneDto, options?: RawAxiosRequestConfig): AxiosPromise<Crane> {
            return localVarFp.cranesControllerCreate(createCraneDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Calculate distance to a point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPoint(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cranesControllerDistanceToPoint(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Calculate distance to a point using an external API
         * @param {number} craneId 
         * @param {number} lat 
         * @param {number} lng 
         * @param {number} currentTicketId 
         * @param {number} ticketTypeid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPointApi(craneId: number, lat: number, lng: number, currentTicketId: number, ticketTypeid: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cranesControllerDistanceToPointApi(craneId, lat, lng, currentTicketId, ticketTypeid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Calculate distance to a point for a specific crane
         * @param {string} id 
         * @param {string} lat 
         * @param {string} lng 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerDistanceToPointByCrane(id: string, lat: string, lng: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cranesControllerDistanceToPointByCrane(id, lat, lng, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all cranes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Crane>> {
            return localVarFp.cranesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a crane by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Crane> {
            return localVarFp.cranesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all crane locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetAllCranesLocations(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cranesControllerGetAllCranesLocations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the assignment history of a crane
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCraneHistory(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cranesControllerGetCraneHistory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get cranes with finished drives
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCranesDriveFinished(options?: RawAxiosRequestConfig): AxiosPromise<Array<CraneSummaryDto>> {
            return localVarFp.cranesControllerGetCranesDriveFinished(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the status of all cranes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerGetCranesStatus(options?: RawAxiosRequestConfig): AxiosPromise<Array<CranesStatusDto>> {
            return localVarFp.cranesControllerGetCranesStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a crane
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cranesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tickets for a crane
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerTickets(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cranesControllerTickets(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unassign a crane from a user
         * @param {UnassignCraneDto} unassignCraneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerUnassign(unassignCraneDto: UnassignCraneDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cranesControllerUnassign(unassignCraneDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a crane
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cranesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Crane> {
            return localVarFp.cranesControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CranesApi - object-oriented interface
 * @export
 * @class CranesApi
 * @extends {BaseAPI}
 */
export class CranesApi extends BaseAPI {
    /**
     * 
     * @summary Assign a crane to a user
     * @param {AssignCraneDto} assignCraneDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerAssign(assignCraneDto: AssignCraneDto, options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerAssign(assignCraneDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create crane
     * @param {CreateCraneDto} createCraneDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerCreate(createCraneDto: CreateCraneDto, options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerCreate(createCraneDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Calculate distance to a point
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerDistanceToPoint(options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerDistanceToPoint(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Calculate distance to a point using an external API
     * @param {number} craneId 
     * @param {number} lat 
     * @param {number} lng 
     * @param {number} currentTicketId 
     * @param {number} ticketTypeid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerDistanceToPointApi(craneId: number, lat: number, lng: number, currentTicketId: number, ticketTypeid: number, options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerDistanceToPointApi(craneId, lat, lng, currentTicketId, ticketTypeid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Calculate distance to a point for a specific crane
     * @param {string} id 
     * @param {string} lat 
     * @param {string} lng 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerDistanceToPointByCrane(id: string, lat: string, lng: string, options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerDistanceToPointByCrane(id, lat, lng, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all cranes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerFindAll(options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a crane by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all crane locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerGetAllCranesLocations(options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerGetAllCranesLocations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the assignment history of a crane
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerGetCraneHistory(id: number, options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerGetCraneHistory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get cranes with finished drives
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerGetCranesDriveFinished(options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerGetCranesDriveFinished(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the status of all cranes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerGetCranesStatus(options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerGetCranesStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a crane
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tickets for a crane
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerTickets(options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerTickets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unassign a crane from a user
     * @param {UnassignCraneDto} unassignCraneDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerUnassign(unassignCraneDto: UnassignCraneDto, options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerUnassign(unassignCraneDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a crane
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CranesApi
     */
    public cranesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return CranesApiFp(this.configuration).cranesControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DelaysApi - axios parameter creator
 * @export
 */
export const DelaysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all delay values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delaysControllerFindAllDelayValues: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delays/values`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a delay value by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delaysControllerFindOneDelayValue: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delaysControllerFindOneDelayValue', 'id', id)
            const localVarPath = `/delays/values/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DelaysApi - functional programming interface
 * @export
 */
export const DelaysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DelaysApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all delay values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delaysControllerFindAllDelayValues(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DelayValue>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delaysControllerFindAllDelayValues(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DelaysApi.delaysControllerFindAllDelayValues']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a delay value by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delaysControllerFindOneDelayValue(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelayValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delaysControllerFindOneDelayValue(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DelaysApi.delaysControllerFindOneDelayValue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DelaysApi - factory interface
 * @export
 */
export const DelaysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DelaysApiFp(configuration)
    return {
        /**
         * 
         * @summary List all delay values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delaysControllerFindAllDelayValues(options?: RawAxiosRequestConfig): AxiosPromise<Array<DelayValue>> {
            return localVarFp.delaysControllerFindAllDelayValues(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a delay value by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delaysControllerFindOneDelayValue(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DelayValue> {
            return localVarFp.delaysControllerFindOneDelayValue(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DelaysApi - object-oriented interface
 * @export
 * @class DelaysApi
 * @extends {BaseAPI}
 */
export class DelaysApi extends BaseAPI {
    /**
     * 
     * @summary List all delay values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelaysApi
     */
    public delaysControllerFindAllDelayValues(options?: RawAxiosRequestConfig) {
        return DelaysApiFp(this.configuration).delaysControllerFindAllDelayValues(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a delay value by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelaysApi
     */
    public delaysControllerFindOneDelayValue(id: string, options?: RawAxiosRequestConfig) {
        return DelaysApiFp(this.configuration).delaysControllerFindOneDelayValue(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FaresApi - axios parameter creator
 * @export
 */
export const FaresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerCreate: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('faresControllerCreate', 'body', body)
            const localVarPath = `/fares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('faresControllerFindOne', 'id', id)
            const localVarPath = `/fares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('faresControllerRemove', 'id', id)
            const localVarPath = `/fares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('faresControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('faresControllerUpdate', 'body', body)
            const localVarPath = `/fares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FaresApi - functional programming interface
 * @export
 */
export const FaresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FaresApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async faresControllerCreate(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.faresControllerCreate(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaresApi.faresControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async faresControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.faresControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaresApi.faresControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async faresControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.faresControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaresApi.faresControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async faresControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.faresControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaresApi.faresControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async faresControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.faresControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaresApi.faresControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FaresApi - factory interface
 * @export
 */
export const FaresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FaresApiFp(configuration)
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerCreate(body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.faresControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.faresControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.faresControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.faresControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faresControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.faresControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FaresApi - object-oriented interface
 * @export
 * @class FaresApi
 * @extends {BaseAPI}
 */
export class FaresApi extends BaseAPI {
    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    public faresControllerCreate(body: object, options?: RawAxiosRequestConfig) {
        return FaresApiFp(this.configuration).faresControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    public faresControllerFindAll(options?: RawAxiosRequestConfig) {
        return FaresApiFp(this.configuration).faresControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    public faresControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return FaresApiFp(this.configuration).faresControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    public faresControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return FaresApiFp(this.configuration).faresControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaresApi
     */
    public faresControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return FaresApiFp(this.configuration).faresControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GearBoxTypesApi - axios parameter creator
 * @export
 */
export const GearBoxTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all gear box types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearBoxTypesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gear-box-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a gear box type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearBoxTypesControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gearBoxTypesControllerFindOne', 'id', id)
            const localVarPath = `/gear-box-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GearBoxTypesApi - functional programming interface
 * @export
 */
export const GearBoxTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GearBoxTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all gear box types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gearBoxTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GearBoxType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gearBoxTypesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GearBoxTypesApi.gearBoxTypesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a gear box type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gearBoxTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GearBoxType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gearBoxTypesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GearBoxTypesApi.gearBoxTypesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GearBoxTypesApi - factory interface
 * @export
 */
export const GearBoxTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GearBoxTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary List all gear box types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearBoxTypesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<GearBoxType>> {
            return localVarFp.gearBoxTypesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a gear box type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearBoxTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GearBoxType> {
            return localVarFp.gearBoxTypesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GearBoxTypesApi - object-oriented interface
 * @export
 * @class GearBoxTypesApi
 * @extends {BaseAPI}
 */
export class GearBoxTypesApi extends BaseAPI {
    /**
     * 
     * @summary List all gear box types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GearBoxTypesApi
     */
    public gearBoxTypesControllerFindAll(options?: RawAxiosRequestConfig) {
        return GearBoxTypesApiFp(this.configuration).gearBoxTypesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a gear box type by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GearBoxTypesApi
     */
    public gearBoxTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return GearBoxTypesApiFp(this.configuration).gearBoxTypesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InsurersApi - axios parameter creator
 * @export
 */
export const InsurersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create insurer
         * @param {CreateInsurerDto} createInsurerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerCreate: async (createInsurerDto: CreateInsurerDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createInsurerDto' is not null or undefined
            assertParamExists('insurersControllerCreate', 'createInsurerDto', createInsurerDto)
            const localVarPath = `/insurers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createInsurerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all insurers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/insurers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an insurer by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('insurersControllerFindOne', 'id', id)
            const localVarPath = `/insurers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an insurer
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('insurersControllerRemove', 'id', id)
            const localVarPath = `/insurers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an insurer
         * @param {string} id 
         * @param {UpdateInsurerDto} updateInsurerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerUpdate: async (id: string, updateInsurerDto: UpdateInsurerDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('insurersControllerUpdate', 'id', id)
            // verify required parameter 'updateInsurerDto' is not null or undefined
            assertParamExists('insurersControllerUpdate', 'updateInsurerDto', updateInsurerDto)
            const localVarPath = `/insurers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateInsurerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InsurersApi - functional programming interface
 * @export
 */
export const InsurersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InsurersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create insurer
         * @param {CreateInsurerDto} createInsurerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insurersControllerCreate(createInsurerDto: CreateInsurerDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Insurer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insurersControllerCreate(createInsurerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InsurersApi.insurersControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all insurers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insurersControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Insurer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insurersControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InsurersApi.insurersControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get an insurer by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insurersControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Insurer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insurersControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InsurersApi.insurersControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an insurer
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insurersControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insurersControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InsurersApi.insurersControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an insurer
         * @param {string} id 
         * @param {UpdateInsurerDto} updateInsurerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insurersControllerUpdate(id: string, updateInsurerDto: UpdateInsurerDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Insurer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insurersControllerUpdate(id, updateInsurerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InsurersApi.insurersControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InsurersApi - factory interface
 * @export
 */
export const InsurersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InsurersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create insurer
         * @param {CreateInsurerDto} createInsurerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerCreate(createInsurerDto: CreateInsurerDto, options?: RawAxiosRequestConfig): AxiosPromise<Insurer> {
            return localVarFp.insurersControllerCreate(createInsurerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all insurers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Insurer>> {
            return localVarFp.insurersControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an insurer by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Insurer> {
            return localVarFp.insurersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an insurer
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.insurersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an insurer
         * @param {string} id 
         * @param {UpdateInsurerDto} updateInsurerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurersControllerUpdate(id: string, updateInsurerDto: UpdateInsurerDto, options?: RawAxiosRequestConfig): AxiosPromise<Insurer> {
            return localVarFp.insurersControllerUpdate(id, updateInsurerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InsurersApi - object-oriented interface
 * @export
 * @class InsurersApi
 * @extends {BaseAPI}
 */
export class InsurersApi extends BaseAPI {
    /**
     * 
     * @summary Create insurer
     * @param {CreateInsurerDto} createInsurerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    public insurersControllerCreate(createInsurerDto: CreateInsurerDto, options?: RawAxiosRequestConfig) {
        return InsurersApiFp(this.configuration).insurersControllerCreate(createInsurerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all insurers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    public insurersControllerFindAll(options?: RawAxiosRequestConfig) {
        return InsurersApiFp(this.configuration).insurersControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an insurer by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    public insurersControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return InsurersApiFp(this.configuration).insurersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an insurer
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    public insurersControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return InsurersApiFp(this.configuration).insurersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an insurer
     * @param {string} id 
     * @param {UpdateInsurerDto} updateInsurerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsurersApi
     */
    public insurersControllerUpdate(id: string, updateInsurerDto: UpdateInsurerDto, options?: RawAxiosRequestConfig) {
        return InsurersApiFp(this.configuration).insurersControllerUpdate(id, updateInsurerDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LocationsApi - axios parameter creator
 * @export
 */
export const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create location
         * @param {CreateLocationDto} createLocationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerCreate: async (createLocationDto: CreateLocationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createLocationDto' is not null or undefined
            assertParamExists('locationsControllerCreate', 'createLocationDto', createLocationDto)
            const localVarPath = `/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLocationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a location by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationsControllerFindOne', 'id', id)
            const localVarPath = `/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a location
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationsControllerRemove', 'id', id)
            const localVarPath = `/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a location
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationsControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('locationsControllerUpdate', 'body', body)
            const localVarPath = `/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsApi - functional programming interface
 * @export
 */
export const LocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create location
         * @param {CreateLocationDto} createLocationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationsControllerCreate(createLocationDto: CreateLocationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationsControllerCreate(createLocationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationsApi.locationsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Location>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationsApi.locationsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a location by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationsApi.locationsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a location
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationsApi.locationsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a location
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationsControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationsApi.locationsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LocationsApi - factory interface
 * @export
 */
export const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create location
         * @param {CreateLocationDto} createLocationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerCreate(createLocationDto: CreateLocationDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.locationsControllerCreate(createLocationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Location>> {
            return localVarFp.locationsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a location by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Location> {
            return localVarFp.locationsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a location
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.locationsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a location
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Location> {
            return localVarFp.locationsControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export class LocationsApi extends BaseAPI {
    /**
     * 
     * @summary Create location
     * @param {CreateLocationDto} createLocationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsControllerCreate(createLocationDto: CreateLocationDto, options?: RawAxiosRequestConfig) {
        return LocationsApiFp(this.configuration).locationsControllerCreate(createLocationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsControllerFindAll(options?: RawAxiosRequestConfig) {
        return LocationsApiFp(this.configuration).locationsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a location by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return LocationsApiFp(this.configuration).locationsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a location
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return LocationsApiFp(this.configuration).locationsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a location
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return LocationsApiFp(this.configuration).locationsControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all payment types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerFindAllPaymentTypes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payments/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all payment types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsControllerFindAllPaymentTypes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsControllerFindAllPaymentTypes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentsApi.paymentsControllerFindAllPaymentTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentsApiFp(configuration)
    return {
        /**
         * 
         * @summary List all payment types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerFindAllPaymentTypes(options?: RawAxiosRequestConfig): AxiosPromise<Array<PaymentType>> {
            return localVarFp.paymentsControllerFindAllPaymentTypes(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
    /**
     * 
     * @summary List all payment types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentsControllerFindAllPaymentTypes(options?: RawAxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentsControllerFindAllPaymentTypes(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request trips per day report
         * @param {TripsPerDayDto} tripsPerDayDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerRequestTripsPerDay: async (tripsPerDayDto: TripsPerDayDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tripsPerDayDto' is not null or undefined
            assertParamExists('reportsControllerRequestTripsPerDay', 'tripsPerDayDto', tripsPerDayDto)
            const localVarPath = `/reports/request-trips-per-day`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tripsPerDayDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request trips status changes report
         * @param {TripsStatusChangesDto} tripsStatusChangesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerRequestTripsStatusChanges: async (tripsStatusChangesDto: TripsStatusChangesDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tripsStatusChangesDto' is not null or undefined
            assertParamExists('reportsControllerRequestTripsStatusChanges', 'tripsStatusChangesDto', tripsStatusChangesDto)
            const localVarPath = `/reports/request-trips-status-changes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tripsStatusChangesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Report>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.reportsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request trips per day report
         * @param {TripsPerDayDto} tripsPerDayDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsControllerRequestTripsPerDay(tripsPerDayDto: TripsPerDayDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsControllerRequestTripsPerDay(tripsPerDayDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.reportsControllerRequestTripsPerDay']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request trips status changes report
         * @param {TripsStatusChangesDto} tripsStatusChangesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto: TripsStatusChangesDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.reportsControllerRequestTripsStatusChanges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * 
         * @summary List all reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Report>> {
            return localVarFp.reportsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request trips per day report
         * @param {TripsPerDayDto} tripsPerDayDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerRequestTripsPerDay(tripsPerDayDto: TripsPerDayDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.reportsControllerRequestTripsPerDay(tripsPerDayDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request trips status changes report
         * @param {TripsStatusChangesDto} tripsStatusChangesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto: TripsStatusChangesDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * 
     * @summary List all reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsControllerFindAll(options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).reportsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request trips per day report
     * @param {TripsPerDayDto} tripsPerDayDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsControllerRequestTripsPerDay(tripsPerDayDto: TripsPerDayDto, options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).reportsControllerRequestTripsPerDay(tripsPerDayDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request trips status changes report
     * @param {TripsStatusChangesDto} tripsStatusChangesDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto: TripsStatusChangesDto, options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).reportsControllerRequestTripsStatusChanges(tripsStatusChangesDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create role
         * @param {CreateRoleDto} createRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreate: async (createRoleDto: CreateRoleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoleDto' is not null or undefined
            assertParamExists('rolesControllerCreate', 'createRoleDto', createRoleDto)
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a role by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesControllerFindOne', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesControllerRemove', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a role
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('rolesControllerUpdate', 'body', body)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create role
         * @param {CreateRoleDto} createRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerCreate(createRoleDto: CreateRoleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerCreate(createRoleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.rolesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.rolesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a role by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.rolesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.rolesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a role
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.rolesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create role
         * @param {CreateRoleDto} createRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreate(createRoleDto: CreateRoleDto, options?: RawAxiosRequestConfig): AxiosPromise<Role> {
            return localVarFp.rolesControllerCreate(createRoleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Role>> {
            return localVarFp.rolesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a role by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Role> {
            return localVarFp.rolesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rolesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a role
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Role> {
            return localVarFp.rolesControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * 
     * @summary Create role
     * @param {CreateRoleDto} createRoleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesControllerCreate(createRoleDto: CreateRoleDto, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesControllerCreate(createRoleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesControllerFindAll(options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a role by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a role
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a role
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create setting
         * @param {CreateSettingDto} createSettingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerCreate: async (createSettingDto: CreateSettingDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSettingDto' is not null or undefined
            assertParamExists('settingsControllerCreate', 'createSettingDto', createSettingDto)
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSettingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a setting by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('settingsControllerFindOne', 'id', id)
            const localVarPath = `/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a setting
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('settingsControllerRemove', 'id', id)
            const localVarPath = `/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a setting
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('settingsControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('settingsControllerUpdate', 'body', body)
            const localVarPath = `/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create setting
         * @param {CreateSettingDto} createSettingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerCreate(createSettingDto: CreateSettingDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Setting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerCreate(createSettingDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.settingsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Setting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.settingsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a setting by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Setting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.settingsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a setting
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.settingsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a setting
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Setting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.settingsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create setting
         * @param {CreateSettingDto} createSettingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerCreate(createSettingDto: CreateSettingDto, options?: RawAxiosRequestConfig): AxiosPromise<Setting> {
            return localVarFp.settingsControllerCreate(createSettingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Setting>> {
            return localVarFp.settingsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a setting by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Setting> {
            return localVarFp.settingsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a setting
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.settingsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a setting
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Setting> {
            return localVarFp.settingsControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * 
     * @summary Create setting
     * @param {CreateSettingDto} createSettingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsControllerCreate(createSettingDto: CreateSettingDto, options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).settingsControllerCreate(createSettingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsControllerFindAll(options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).settingsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a setting by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).settingsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a setting
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).settingsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a setting
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).settingsControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SettlementsApi - axios parameter creator
 * @export
 */
export const SettlementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Calculate settlements for providers (TODO: Remove)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerCalculateForDrivers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settlements/provider`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all settlements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request settlement email
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerRequestEmail: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('settlementsControllerRequestEmail', 'body', body)
            const localVarPath = `/settlements/request-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettlementsApi - functional programming interface
 * @export
 */
export const SettlementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettlementsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Calculate settlements for providers (TODO: Remove)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settlementsControllerCalculateForDrivers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settlementsControllerCalculateForDrivers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettlementsApi.settlementsControllerCalculateForDrivers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all settlements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settlementsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Settlement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settlementsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettlementsApi.settlementsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request settlement email
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settlementsControllerRequestEmail(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settlementsControllerRequestEmail(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettlementsApi.settlementsControllerRequestEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SettlementsApi - factory interface
 * @export
 */
export const SettlementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettlementsApiFp(configuration)
    return {
        /**
         * 
         * @summary Calculate settlements for providers (TODO: Remove)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerCalculateForDrivers(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.settlementsControllerCalculateForDrivers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all settlements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Settlement>> {
            return localVarFp.settlementsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request settlement email
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settlementsControllerRequestEmail(body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.settlementsControllerRequestEmail(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettlementsApi - object-oriented interface
 * @export
 * @class SettlementsApi
 * @extends {BaseAPI}
 */
export class SettlementsApi extends BaseAPI {
    /**
     * 
     * @summary Calculate settlements for providers (TODO: Remove)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementsApi
     */
    public settlementsControllerCalculateForDrivers(options?: RawAxiosRequestConfig) {
        return SettlementsApiFp(this.configuration).settlementsControllerCalculateForDrivers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all settlements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementsApi
     */
    public settlementsControllerFindAll(options?: RawAxiosRequestConfig) {
        return SettlementsApiFp(this.configuration).settlementsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request settlement email
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementsApi
     */
    public settlementsControllerRequestEmail(body: object, options?: RawAxiosRequestConfig) {
        return SettlementsApiFp(this.configuration).settlementsControllerRequestEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TicketsApi - axios parameter creator
 * @export
 */
export const TicketsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assign a ticket to a crane
         * @param {string} ticketId 
         * @param {string} craneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerAssign: async (ticketId: string, craneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('ticketsControllerAssign', 'ticketId', ticketId)
            // verify required parameter 'craneId' is not null or undefined
            assertParamExists('ticketsControllerAssign', 'craneId', craneId)
            const localVarPath = `/tickets/{ticketId}/assign/{craneId}`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)))
                .replace(`{${"craneId"}}`, encodeURIComponent(String(craneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create ticket
         * @param {CreateTicketDto} createTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreate: async (createTicketDto: CreateTicketDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTicketDto' is not null or undefined
            assertParamExists('ticketsControllerCreate', 'createTicketDto', createTicketDto)
            const localVarPath = `/tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTicketDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create event from SIR
         * @param {SirEventDto} sirEventDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateEventFromSir: async (sirEventDto: SirEventDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sirEventDto' is not null or undefined
            assertParamExists('ticketsControllerCreateEventFromSir', 'sirEventDto', sirEventDto)
            const localVarPath = `/tickets/events/sir`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sirEventDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a ticket comment
         * @param {CreateTicketCommentDto} createTicketCommentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateTicketComment: async (createTicketCommentDto: CreateTicketCommentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTicketCommentDto' is not null or undefined
            assertParamExists('ticketsControllerCreateTicketComment', 'createTicketCommentDto', createTicketCommentDto)
            const localVarPath = `/tickets/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTicketCommentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all tickets (beta)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindAllBeta: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tickets/beta`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a ticket by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsControllerFindOne', 'id', id)
            const localVarPath = `/tickets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find tickets for board
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindTickets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tickets/board`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get arrival time for a crane to a ticket
         * @param {string} ticketId 
         * @param {string} craneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerGetArrivalTimeCrane: async (ticketId: string, craneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('ticketsControllerGetArrivalTimeCrane', 'ticketId', ticketId)
            // verify required parameter 'craneId' is not null or undefined
            assertParamExists('ticketsControllerGetArrivalTimeCrane', 'craneId', craneId)
            const localVarPath = `/tickets/arrival-time/{ticketId}/{craneId}`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)))
                .replace(`{${"craneId"}}`, encodeURIComponent(String(craneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get nearby cranes for a ticket
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerGetNearbyCranes: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsControllerGetNearbyCranes', 'id', id)
            const localVarPath = `/tickets/{id}/nearby-cranes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a ticket
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsControllerRemove', 'id', id)
            const localVarPath = `/tickets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a ticket
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ticketsControllerUpdate', 'body', body)
            const localVarPath = `/tickets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a ticket step
         * @param {number} id 
         * @param {UpdateTicketStepDto} updateTicketStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerUpdateTicketStep: async (id: number, updateTicketStepDto: UpdateTicketStepDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsControllerUpdateTicketStep', 'id', id)
            // verify required parameter 'updateTicketStepDto' is not null or undefined
            assertParamExists('ticketsControllerUpdateTicketStep', 'updateTicketStepDto', updateTicketStepDto)
            const localVarPath = `/tickets/step/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTicketStepDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketsApi - functional programming interface
 * @export
 */
export const TicketsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Assign a ticket to a crane
         * @param {string} ticketId 
         * @param {string} craneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerAssign(ticketId: string, craneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerAssign(ticketId, craneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerAssign']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create ticket
         * @param {CreateTicketDto} createTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerCreate(createTicketDto: CreateTicketDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerCreate(createTicketDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create event from SIR
         * @param {SirEventDto} sirEventDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerCreateEventFromSir(sirEventDto: SirEventDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerCreateEventFromSir(sirEventDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerCreateEventFromSir']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a ticket comment
         * @param {CreateTicketCommentDto} createTicketCommentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerCreateTicketComment(createTicketCommentDto: CreateTicketCommentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerCreateTicketComment(createTicketCommentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerCreateTicketComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all tickets (beta)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerFindAllBeta(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerFindAllBeta(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerFindAllBeta']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a ticket by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find tickets for board
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerFindTickets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerFindTickets(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerFindTickets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get arrival time for a crane to a ticket
         * @param {string} ticketId 
         * @param {string} craneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerGetArrivalTimeCrane(ticketId: string, craneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerGetArrivalTimeCrane(ticketId, craneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerGetArrivalTimeCrane']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get nearby cranes for a ticket
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerGetNearbyCranes(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerGetNearbyCranes(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerGetNearbyCranes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a ticket
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a ticket
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a ticket step
         * @param {number} id 
         * @param {UpdateTicketStepDto} updateTicketStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsControllerUpdateTicketStep(id: number, updateTicketStepDto: UpdateTicketStepDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsControllerUpdateTicketStep(id, updateTicketStepDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.ticketsControllerUpdateTicketStep']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TicketsApi - factory interface
 * @export
 */
export const TicketsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketsApiFp(configuration)
    return {
        /**
         * 
         * @summary Assign a ticket to a crane
         * @param {string} ticketId 
         * @param {string} craneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerAssign(ticketId: string, craneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ticketsControllerAssign(ticketId, craneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create ticket
         * @param {CreateTicketDto} createTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreate(createTicketDto: CreateTicketDto, options?: RawAxiosRequestConfig): AxiosPromise<Ticket> {
            return localVarFp.ticketsControllerCreate(createTicketDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create event from SIR
         * @param {SirEventDto} sirEventDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateEventFromSir(sirEventDto: SirEventDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ticketsControllerCreateEventFromSir(sirEventDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a ticket comment
         * @param {CreateTicketCommentDto} createTicketCommentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateTicketComment(createTicketCommentDto: CreateTicketCommentDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ticketsControllerCreateTicketComment(createTicketCommentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Ticket>> {
            return localVarFp.ticketsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all tickets (beta)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindAllBeta(options?: RawAxiosRequestConfig): AxiosPromise<Array<Ticket>> {
            return localVarFp.ticketsControllerFindAllBeta(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a ticket by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Ticket> {
            return localVarFp.ticketsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find tickets for board
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerFindTickets(options?: RawAxiosRequestConfig): AxiosPromise<Array<Ticket>> {
            return localVarFp.ticketsControllerFindTickets(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get arrival time for a crane to a ticket
         * @param {string} ticketId 
         * @param {string} craneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerGetArrivalTimeCrane(ticketId: string, craneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ticketsControllerGetArrivalTimeCrane(ticketId, craneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get nearby cranes for a ticket
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerGetNearbyCranes(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ticketsControllerGetNearbyCranes(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a ticket
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ticketsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a ticket
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Ticket> {
            return localVarFp.ticketsControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a ticket step
         * @param {number} id 
         * @param {UpdateTicketStepDto} updateTicketStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerUpdateTicketStep(id: number, updateTicketStepDto: UpdateTicketStepDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ticketsControllerUpdateTicketStep(id, updateTicketStepDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketsApi - object-oriented interface
 * @export
 * @class TicketsApi
 * @extends {BaseAPI}
 */
export class TicketsApi extends BaseAPI {
    /**
     * 
     * @summary Assign a ticket to a crane
     * @param {string} ticketId 
     * @param {string} craneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerAssign(ticketId: string, craneId: string, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerAssign(ticketId, craneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create ticket
     * @param {CreateTicketDto} createTicketDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerCreate(createTicketDto: CreateTicketDto, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerCreate(createTicketDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create event from SIR
     * @param {SirEventDto} sirEventDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerCreateEventFromSir(sirEventDto: SirEventDto, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerCreateEventFromSir(sirEventDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a ticket comment
     * @param {CreateTicketCommentDto} createTicketCommentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerCreateTicketComment(createTicketCommentDto: CreateTicketCommentDto, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerCreateTicketComment(createTicketCommentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all tickets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerFindAll(options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all tickets (beta)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerFindAllBeta(options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerFindAllBeta(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a ticket by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find tickets for board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerFindTickets(options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerFindTickets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get arrival time for a crane to a ticket
     * @param {string} ticketId 
     * @param {string} craneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerGetArrivalTimeCrane(ticketId: string, craneId: string, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerGetArrivalTimeCrane(ticketId, craneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get nearby cranes for a ticket
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerGetNearbyCranes(id: string, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerGetNearbyCranes(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a ticket
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a ticket
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a ticket step
     * @param {number} id 
     * @param {UpdateTicketStepDto} updateTicketStepDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsControllerUpdateTicketStep(id: number, updateTicketStepDto: UpdateTicketStepDto, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsControllerUpdateTicketStep(id, updateTicketStepDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TractionTypesApi - axios parameter creator
 * @export
 */
export const TractionTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all traction types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tractionTypesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traction-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a traction type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tractionTypesControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tractionTypesControllerFindOne', 'id', id)
            const localVarPath = `/traction-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TractionTypesApi - functional programming interface
 * @export
 */
export const TractionTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TractionTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all traction types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tractionTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TractionType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tractionTypesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TractionTypesApi.tractionTypesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a traction type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tractionTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TractionType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tractionTypesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TractionTypesApi.tractionTypesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TractionTypesApi - factory interface
 * @export
 */
export const TractionTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TractionTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary List all traction types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tractionTypesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<TractionType>> {
            return localVarFp.tractionTypesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a traction type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tractionTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<TractionType> {
            return localVarFp.tractionTypesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TractionTypesApi - object-oriented interface
 * @export
 * @class TractionTypesApi
 * @extends {BaseAPI}
 */
export class TractionTypesApi extends BaseAPI {
    /**
     * 
     * @summary List all traction types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TractionTypesApi
     */
    public tractionTypesControllerFindAll(options?: RawAxiosRequestConfig) {
        return TractionTypesApiFp(this.configuration).tractionTypesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a traction type by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TractionTypesApi
     */
    public tractionTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return TractionTypesApiFp(this.configuration).tractionTypesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create user
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate: async (createUserDto: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('usersControllerCreate', 'createUserDto', createUserDto)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerFindOne', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerRemove', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usersControllerUpdate', 'body', body)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create user
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreate(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create user
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersControllerCreate(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.usersControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Create user
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerCreate(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerFindAll(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VehicleBrandModelsApi - axios parameter creator
 * @export
 */
export const VehicleBrandModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create vehicle brand model
         * @param {CreateVehicleBrandModelDto} createVehicleBrandModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerCreate: async (createVehicleBrandModelDto: CreateVehicleBrandModelDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createVehicleBrandModelDto' is not null or undefined
            assertParamExists('vehicleBrandModelsControllerCreate', 'createVehicleBrandModelDto', createVehicleBrandModelDto)
            const localVarPath = `/vehicle-brand-models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVehicleBrandModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all vehicle brand models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vehicle-brand-models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a vehicle brand model by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vehicleBrandModelsControllerFindOne', 'id', id)
            const localVarPath = `/vehicle-brand-models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a vehicle brand model
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vehicleBrandModelsControllerRemove', 'id', id)
            const localVarPath = `/vehicle-brand-models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a vehicle brand model
         * @param {string} id 
         * @param {UpdateVehicleBrandModelDto} updateVehicleBrandModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerUpdate: async (id: string, updateVehicleBrandModelDto: UpdateVehicleBrandModelDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vehicleBrandModelsControllerUpdate', 'id', id)
            // verify required parameter 'updateVehicleBrandModelDto' is not null or undefined
            assertParamExists('vehicleBrandModelsControllerUpdate', 'updateVehicleBrandModelDto', updateVehicleBrandModelDto)
            const localVarPath = `/vehicle-brand-models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVehicleBrandModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleBrandModelsApi - functional programming interface
 * @export
 */
export const VehicleBrandModelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleBrandModelsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create vehicle brand model
         * @param {CreateVehicleBrandModelDto} createVehicleBrandModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleBrandModelsControllerCreate(createVehicleBrandModelDto: CreateVehicleBrandModelDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleBrandModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleBrandModelsControllerCreate(createVehicleBrandModelDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleBrandModelsApi.vehicleBrandModelsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all vehicle brand models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleBrandModelsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleBrandModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleBrandModelsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleBrandModelsApi.vehicleBrandModelsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a vehicle brand model by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleBrandModelsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleBrandModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleBrandModelsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleBrandModelsApi.vehicleBrandModelsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a vehicle brand model
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleBrandModelsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleBrandModelsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleBrandModelsApi.vehicleBrandModelsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a vehicle brand model
         * @param {string} id 
         * @param {UpdateVehicleBrandModelDto} updateVehicleBrandModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleBrandModelsControllerUpdate(id: string, updateVehicleBrandModelDto: UpdateVehicleBrandModelDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleBrandModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleBrandModelsControllerUpdate(id, updateVehicleBrandModelDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleBrandModelsApi.vehicleBrandModelsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VehicleBrandModelsApi - factory interface
 * @export
 */
export const VehicleBrandModelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleBrandModelsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create vehicle brand model
         * @param {CreateVehicleBrandModelDto} createVehicleBrandModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerCreate(createVehicleBrandModelDto: CreateVehicleBrandModelDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleBrandModel> {
            return localVarFp.vehicleBrandModelsControllerCreate(createVehicleBrandModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all vehicle brand models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<VehicleBrandModel>> {
            return localVarFp.vehicleBrandModelsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a vehicle brand model by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<VehicleBrandModel> {
            return localVarFp.vehicleBrandModelsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a vehicle brand model
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vehicleBrandModelsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a vehicle brand model
         * @param {string} id 
         * @param {UpdateVehicleBrandModelDto} updateVehicleBrandModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandModelsControllerUpdate(id: string, updateVehicleBrandModelDto: UpdateVehicleBrandModelDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleBrandModel> {
            return localVarFp.vehicleBrandModelsControllerUpdate(id, updateVehicleBrandModelDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VehicleBrandModelsApi - object-oriented interface
 * @export
 * @class VehicleBrandModelsApi
 * @extends {BaseAPI}
 */
export class VehicleBrandModelsApi extends BaseAPI {
    /**
     * 
     * @summary Create vehicle brand model
     * @param {CreateVehicleBrandModelDto} createVehicleBrandModelDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    public vehicleBrandModelsControllerCreate(createVehicleBrandModelDto: CreateVehicleBrandModelDto, options?: RawAxiosRequestConfig) {
        return VehicleBrandModelsApiFp(this.configuration).vehicleBrandModelsControllerCreate(createVehicleBrandModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all vehicle brand models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    public vehicleBrandModelsControllerFindAll(options?: RawAxiosRequestConfig) {
        return VehicleBrandModelsApiFp(this.configuration).vehicleBrandModelsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a vehicle brand model by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    public vehicleBrandModelsControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return VehicleBrandModelsApiFp(this.configuration).vehicleBrandModelsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a vehicle brand model
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    public vehicleBrandModelsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return VehicleBrandModelsApiFp(this.configuration).vehicleBrandModelsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a vehicle brand model
     * @param {string} id 
     * @param {UpdateVehicleBrandModelDto} updateVehicleBrandModelDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandModelsApi
     */
    public vehicleBrandModelsControllerUpdate(id: string, updateVehicleBrandModelDto: UpdateVehicleBrandModelDto, options?: RawAxiosRequestConfig) {
        return VehicleBrandModelsApiFp(this.configuration).vehicleBrandModelsControllerUpdate(id, updateVehicleBrandModelDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VehicleBrandsApi - axios parameter creator
 * @export
 */
export const VehicleBrandsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create vehicle brand
         * @param {CreateVehicleBrandDto} createVehicleBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerCreate: async (createVehicleBrandDto: CreateVehicleBrandDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createVehicleBrandDto' is not null or undefined
            assertParamExists('vehicleBrandsControllerCreate', 'createVehicleBrandDto', createVehicleBrandDto)
            const localVarPath = `/vehicle-brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVehicleBrandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all vehicle brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vehicle-brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a vehicle brand by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vehicleBrandsControllerFindOne', 'id', id)
            const localVarPath = `/vehicle-brands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a vehicle brand
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vehicleBrandsControllerRemove', 'id', id)
            const localVarPath = `/vehicle-brands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a vehicle brand
         * @param {string} id 
         * @param {UpdateVehicleBrandDto} updateVehicleBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerUpdate: async (id: string, updateVehicleBrandDto: UpdateVehicleBrandDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vehicleBrandsControllerUpdate', 'id', id)
            // verify required parameter 'updateVehicleBrandDto' is not null or undefined
            assertParamExists('vehicleBrandsControllerUpdate', 'updateVehicleBrandDto', updateVehicleBrandDto)
            const localVarPath = `/vehicle-brands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVehicleBrandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleBrandsApi - functional programming interface
 * @export
 */
export const VehicleBrandsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleBrandsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create vehicle brand
         * @param {CreateVehicleBrandDto} createVehicleBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleBrandsControllerCreate(createVehicleBrandDto: CreateVehicleBrandDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleBrand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleBrandsControllerCreate(createVehicleBrandDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleBrandsApi.vehicleBrandsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all vehicle brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleBrandsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleBrand>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleBrandsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleBrandsApi.vehicleBrandsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a vehicle brand by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleBrandsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleBrand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleBrandsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleBrandsApi.vehicleBrandsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a vehicle brand
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleBrandsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleBrandsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleBrandsApi.vehicleBrandsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a vehicle brand
         * @param {string} id 
         * @param {UpdateVehicleBrandDto} updateVehicleBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleBrandsControllerUpdate(id: string, updateVehicleBrandDto: UpdateVehicleBrandDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleBrand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleBrandsControllerUpdate(id, updateVehicleBrandDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleBrandsApi.vehicleBrandsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VehicleBrandsApi - factory interface
 * @export
 */
export const VehicleBrandsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleBrandsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create vehicle brand
         * @param {CreateVehicleBrandDto} createVehicleBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerCreate(createVehicleBrandDto: CreateVehicleBrandDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleBrand> {
            return localVarFp.vehicleBrandsControllerCreate(createVehicleBrandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all vehicle brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<VehicleBrand>> {
            return localVarFp.vehicleBrandsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a vehicle brand by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<VehicleBrand> {
            return localVarFp.vehicleBrandsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a vehicle brand
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vehicleBrandsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a vehicle brand
         * @param {string} id 
         * @param {UpdateVehicleBrandDto} updateVehicleBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleBrandsControllerUpdate(id: string, updateVehicleBrandDto: UpdateVehicleBrandDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleBrand> {
            return localVarFp.vehicleBrandsControllerUpdate(id, updateVehicleBrandDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VehicleBrandsApi - object-oriented interface
 * @export
 * @class VehicleBrandsApi
 * @extends {BaseAPI}
 */
export class VehicleBrandsApi extends BaseAPI {
    /**
     * 
     * @summary Create vehicle brand
     * @param {CreateVehicleBrandDto} createVehicleBrandDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    public vehicleBrandsControllerCreate(createVehicleBrandDto: CreateVehicleBrandDto, options?: RawAxiosRequestConfig) {
        return VehicleBrandsApiFp(this.configuration).vehicleBrandsControllerCreate(createVehicleBrandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all vehicle brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    public vehicleBrandsControllerFindAll(options?: RawAxiosRequestConfig) {
        return VehicleBrandsApiFp(this.configuration).vehicleBrandsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a vehicle brand by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    public vehicleBrandsControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return VehicleBrandsApiFp(this.configuration).vehicleBrandsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a vehicle brand
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    public vehicleBrandsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return VehicleBrandsApiFp(this.configuration).vehicleBrandsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a vehicle brand
     * @param {string} id 
     * @param {UpdateVehicleBrandDto} updateVehicleBrandDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleBrandsApi
     */
    public vehicleBrandsControllerUpdate(id: string, updateVehicleBrandDto: UpdateVehicleBrandDto, options?: RawAxiosRequestConfig) {
        return VehicleBrandsApiFp(this.configuration).vehicleBrandsControllerUpdate(id, updateVehicleBrandDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VehicleTypesApi - axios parameter creator
 * @export
 */
export const VehicleTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create vehicle type
         * @param {CreateVehicleTypeDto} createVehicleTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerCreate: async (createVehicleTypeDto: CreateVehicleTypeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createVehicleTypeDto' is not null or undefined
            assertParamExists('vehicleTypesControllerCreate', 'createVehicleTypeDto', createVehicleTypeDto)
            const localVarPath = `/vehicle-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVehicleTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all vehicle types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vehicle-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a vehicle type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vehicleTypesControllerFindOne', 'id', id)
            const localVarPath = `/vehicle-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a vehicle type
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vehicleTypesControllerRemove', 'id', id)
            const localVarPath = `/vehicle-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a vehicle type
         * @param {string} id 
         * @param {UpdateVehicleTypeDto} updateVehicleTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerUpdate: async (id: string, updateVehicleTypeDto: UpdateVehicleTypeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vehicleTypesControllerUpdate', 'id', id)
            // verify required parameter 'updateVehicleTypeDto' is not null or undefined
            assertParamExists('vehicleTypesControllerUpdate', 'updateVehicleTypeDto', updateVehicleTypeDto)
            const localVarPath = `/vehicle-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVehicleTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleTypesApi - functional programming interface
 * @export
 */
export const VehicleTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create vehicle type
         * @param {CreateVehicleTypeDto} createVehicleTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleTypesControllerCreate(createVehicleTypeDto: CreateVehicleTypeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleTypesControllerCreate(createVehicleTypeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleTypesApi.vehicleTypesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all vehicle types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleTypesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleTypesApi.vehicleTypesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a vehicle type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleTypesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleTypesApi.vehicleTypesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a vehicle type
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleTypesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleTypesControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleTypesApi.vehicleTypesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a vehicle type
         * @param {string} id 
         * @param {UpdateVehicleTypeDto} updateVehicleTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleTypesControllerUpdate(id: string, updateVehicleTypeDto: UpdateVehicleTypeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleTypesControllerUpdate(id, updateVehicleTypeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleTypesApi.vehicleTypesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VehicleTypesApi - factory interface
 * @export
 */
export const VehicleTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create vehicle type
         * @param {CreateVehicleTypeDto} createVehicleTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerCreate(createVehicleTypeDto: CreateVehicleTypeDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleType> {
            return localVarFp.vehicleTypesControllerCreate(createVehicleTypeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all vehicle types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<VehicleType>> {
            return localVarFp.vehicleTypesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a vehicle type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<VehicleType> {
            return localVarFp.vehicleTypesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a vehicle type
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vehicleTypesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a vehicle type
         * @param {string} id 
         * @param {UpdateVehicleTypeDto} updateVehicleTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleTypesControllerUpdate(id: string, updateVehicleTypeDto: UpdateVehicleTypeDto, options?: RawAxiosRequestConfig): AxiosPromise<VehicleType> {
            return localVarFp.vehicleTypesControllerUpdate(id, updateVehicleTypeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VehicleTypesApi - object-oriented interface
 * @export
 * @class VehicleTypesApi
 * @extends {BaseAPI}
 */
export class VehicleTypesApi extends BaseAPI {
    /**
     * 
     * @summary Create vehicle type
     * @param {CreateVehicleTypeDto} createVehicleTypeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    public vehicleTypesControllerCreate(createVehicleTypeDto: CreateVehicleTypeDto, options?: RawAxiosRequestConfig) {
        return VehicleTypesApiFp(this.configuration).vehicleTypesControllerCreate(createVehicleTypeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all vehicle types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    public vehicleTypesControllerFindAll(options?: RawAxiosRequestConfig) {
        return VehicleTypesApiFp(this.configuration).vehicleTypesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a vehicle type by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    public vehicleTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return VehicleTypesApiFp(this.configuration).vehicleTypesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a vehicle type
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    public vehicleTypesControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return VehicleTypesApiFp(this.configuration).vehicleTypesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a vehicle type
     * @param {string} id 
     * @param {UpdateVehicleTypeDto} updateVehicleTypeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleTypesApi
     */
    public vehicleTypesControllerUpdate(id: string, updateVehicleTypeDto: UpdateVehicleTypeDto, options?: RawAxiosRequestConfig) {
        return VehicleTypesApiFp(this.configuration).vehicleTypesControllerUpdate(id, updateVehicleTypeDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VehicleWheelTypesApi - axios parameter creator
 * @export
 */
export const VehicleWheelTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all vehicle wheel types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleWheelTypesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vehicle-wheel-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a vehicle wheel type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleWheelTypesControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vehicleWheelTypesControllerFindOne', 'id', id)
            const localVarPath = `/vehicle-wheel-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleWheelTypesApi - functional programming interface
 * @export
 */
export const VehicleWheelTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleWheelTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all vehicle wheel types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleWheelTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleWheelType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleWheelTypesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleWheelTypesApi.vehicleWheelTypesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a vehicle wheel type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleWheelTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleWheelType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleWheelTypesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleWheelTypesApi.vehicleWheelTypesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VehicleWheelTypesApi - factory interface
 * @export
 */
export const VehicleWheelTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleWheelTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary List all vehicle wheel types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleWheelTypesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<VehicleWheelType>> {
            return localVarFp.vehicleWheelTypesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a vehicle wheel type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleWheelTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<VehicleWheelType> {
            return localVarFp.vehicleWheelTypesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VehicleWheelTypesApi - object-oriented interface
 * @export
 * @class VehicleWheelTypesApi
 * @extends {BaseAPI}
 */
export class VehicleWheelTypesApi extends BaseAPI {
    /**
     * 
     * @summary List all vehicle wheel types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleWheelTypesApi
     */
    public vehicleWheelTypesControllerFindAll(options?: RawAxiosRequestConfig) {
        return VehicleWheelTypesApiFp(this.configuration).vehicleWheelTypesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a vehicle wheel type by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleWheelTypesApi
     */
    public vehicleWheelTypesControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return VehicleWheelTypesApiFp(this.configuration).vehicleWheelTypesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



